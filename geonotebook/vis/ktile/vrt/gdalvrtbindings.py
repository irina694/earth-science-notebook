#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Fri Dec 16 14:10:17 2016 by generateDS.py version 2.24a.
#
# Command line options:
#   ('--use-getter-setter', 'none')
#   ('--export', 'write literal')
#   ('-o', 'gdalvrtbindings.py')
#
# Command line arguments:
#   gdalvrt.xsd
#
# Command line:
#   /home/kotfic/.venvs/geonotebook2/bin/generateDS --use-getter-setter="none" --export="write literal" -o "gdalvrtbindings.py" gdalvrt.xsd
#
# Current working directory (os.getcwd()):
#   vrt
#

# flake8: noqa

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring

    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name, pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class VRTDataset(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, subClass=None, rasterXSize=None, rasterYSize=None, SRS=None, GeoTransform=None, GCPList=None, BlockXSize=None, BlockYSize=None, Metadata=None, VRTRasterBand=None, MaskBand=None, GDALWarpOptions=None, PansharpeningOptions=None):
        self.original_tagname_ = None
        self.subClass = _cast(None, subClass)
        self.rasterXSize = _cast(None, rasterXSize)
        self.rasterYSize = _cast(None, rasterYSize)
        if SRS is None:
            self.SRS = []
        else:
            self.SRS = SRS
        if GeoTransform is None:
            self.GeoTransform = []
        else:
            self.GeoTransform = GeoTransform
        if GCPList is None:
            self.GCPList = []
        else:
            self.GCPList = GCPList
        if BlockXSize is None:
            self.BlockXSize = []
        else:
            self.BlockXSize = BlockXSize
        if BlockYSize is None:
            self.BlockYSize = []
        else:
            self.BlockYSize = BlockYSize
        if Metadata is None:
            self.Metadata = []
        else:
            self.Metadata = Metadata
        if VRTRasterBand is None:
            self.VRTRasterBand = []
        else:
            self.VRTRasterBand = VRTRasterBand
        if MaskBand is None:
            self.MaskBand = []
        else:
            self.MaskBand = MaskBand
        if GDALWarpOptions is None:
            self.GDALWarpOptions = []
        else:
            self.GDALWarpOptions = GDALWarpOptions
        if PansharpeningOptions is None:
            self.PansharpeningOptions = []
        else:
            self.PansharpeningOptions = PansharpeningOptions
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VRTDataset)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VRTDataset.subclass:
            return VRTDataset.subclass(*args_, **kwargs_)
        else:
            return VRTDataset(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_nonNegativeInteger32(self, value):
        # Validate type nonNegativeInteger32, a restriction on xs:nonNegativeInteger.
        if value is not None and Validate_simpletypes_:
            if value > 2147483647:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on nonNegativeInteger32' % {"value" : value} )
    def hasContent_(self):
        if (
            self.SRS or
            self.GeoTransform or
            self.GCPList or
            self.BlockXSize or
            self.BlockYSize or
            self.Metadata or
            self.VRTRasterBand or
            self.MaskBand or
            self.GDALWarpOptions or
            self.PansharpeningOptions
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='VRTDataset', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VRTDataset')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='VRTDataset', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='VRTDataset'):
        if self.subClass is not None and 'subClass' not in already_processed:
            already_processed.add('subClass')
            outfile.write(' subClass=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.subClass), input_name='subClass')), ))
        if self.rasterXSize is not None and 'rasterXSize' not in already_processed:
            already_processed.add('rasterXSize')
            outfile.write(' rasterXSize=%s' % (quote_attrib(self.rasterXSize), ))
        if self.rasterYSize is not None and 'rasterYSize' not in already_processed:
            already_processed.add('rasterYSize')
            outfile.write(' rasterYSize=%s' % (quote_attrib(self.rasterYSize), ))
    def exportChildren(self, outfile, level, namespace_='', name_='VRTDataset', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SRS_ in self.SRS:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSRS>%s</%sSRS>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(SRS_), input_name='SRS')), namespace_, eol_))
        for GeoTransform_ in self.GeoTransform:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGeoTransform>%s</%sGeoTransform>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(GeoTransform_), input_name='GeoTransform')), namespace_, eol_))
        for GCPList_ in self.GCPList:
            GCPList_.export(outfile, level, namespace_, name_='GCPList', pretty_print=pretty_print)
        for BlockXSize_ in self.BlockXSize:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBlockXSize>%s</%sBlockXSize>%s' % (namespace_, self.gds_format_integer(BlockXSize_, input_name='BlockXSize'), namespace_, eol_))
        for BlockYSize_ in self.BlockYSize:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBlockYSize>%s</%sBlockYSize>%s' % (namespace_, self.gds_format_integer(BlockYSize_, input_name='BlockYSize'), namespace_, eol_))
        for Metadata_ in self.Metadata:
            Metadata_.export(outfile, level, namespace_, name_='Metadata', pretty_print=pretty_print)
        for VRTRasterBand_ in self.VRTRasterBand:
            VRTRasterBand_.export(outfile, level, namespace_, name_='VRTRasterBand', pretty_print=pretty_print)
        for MaskBand_ in self.MaskBand:
            MaskBand_.export(outfile, level, namespace_, name_='MaskBand', pretty_print=pretty_print)
        for GDALWarpOptions_ in self.GDALWarpOptions:
            GDALWarpOptions_.export(outfile, level, namespace_, name_='GDALWarpOptions', pretty_print=pretty_print)
        for PansharpeningOptions_ in self.PansharpeningOptions:
            PansharpeningOptions_.export(outfile, level, namespace_, name_='PansharpeningOptions', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='VRTDataset'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.subClass is not None and 'subClass' not in already_processed:
            already_processed.add('subClass')
            showIndent(outfile, level)
            outfile.write('subClass="%s",\n' % (self.subClass,))
        if self.rasterXSize is not None and 'rasterXSize' not in already_processed:
            already_processed.add('rasterXSize')
            showIndent(outfile, level)
            outfile.write('rasterXSize=%d,\n' % (self.rasterXSize,))
        if self.rasterYSize is not None and 'rasterYSize' not in already_processed:
            already_processed.add('rasterYSize')
            showIndent(outfile, level)
            outfile.write('rasterYSize=%d,\n' % (self.rasterYSize,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('SRS=[\n')
        level += 1
        for SRS_ in self.SRS:
            showIndent(outfile, level)
            outfile.write('%s,\n' % self.gds_encode(quote_python(SRS_)))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('GeoTransform=[\n')
        level += 1
        for GeoTransform_ in self.GeoTransform:
            showIndent(outfile, level)
            outfile.write('%s,\n' % self.gds_encode(quote_python(GeoTransform_)))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('GCPList=[\n')
        level += 1
        for GCPList_ in self.GCPList:
            showIndent(outfile, level)
            outfile.write('model_.GCPListType(\n')
            GCPList_.exportLiteral(outfile, level, name_='GCPListType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('BlockXSize=[\n')
        level += 1
        for BlockXSize_ in self.BlockXSize:
            showIndent(outfile, level)
            outfile.write('%d,\n' % BlockXSize_)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('BlockYSize=[\n')
        level += 1
        for BlockYSize_ in self.BlockYSize:
            showIndent(outfile, level)
            outfile.write('%d,\n' % BlockYSize_)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Metadata=[\n')
        level += 1
        for Metadata_ in self.Metadata:
            showIndent(outfile, level)
            outfile.write('model_.MetadataType(\n')
            Metadata_.exportLiteral(outfile, level, name_='MetadataType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('VRTRasterBand=[\n')
        level += 1
        for VRTRasterBand_ in self.VRTRasterBand:
            showIndent(outfile, level)
            outfile.write('model_.VRTRasterBandType(\n')
            VRTRasterBand_.exportLiteral(outfile, level, name_='VRTRasterBandType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('MaskBand=[\n')
        level += 1
        for MaskBand_ in self.MaskBand:
            showIndent(outfile, level)
            outfile.write('model_.MaskBandType(\n')
            MaskBand_.exportLiteral(outfile, level, name_='MaskBandType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('GDALWarpOptions=[\n')
        level += 1
        for GDALWarpOptions_ in self.GDALWarpOptions:
            showIndent(outfile, level)
            outfile.write('model_.GDALWarpOptionsType(\n')
            GDALWarpOptions_.exportLiteral(outfile, level, name_='GDALWarpOptionsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('PansharpeningOptions=[\n')
        level += 1
        for PansharpeningOptions_ in self.PansharpeningOptions:
            showIndent(outfile, level)
            outfile.write('model_.PansharpeningOptionsType(\n')
            PansharpeningOptions_.exportLiteral(outfile, level, name_='PansharpeningOptionsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('subClass', node)
        if value is not None and 'subClass' not in already_processed:
            already_processed.add('subClass')
            self.subClass = value
        value = find_attr_value_('rasterXSize', node)
        if value is not None and 'rasterXSize' not in already_processed:
            already_processed.add('rasterXSize')
            try:
                self.rasterXSize = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.rasterXSize < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
            self.validate_nonNegativeInteger32(self.rasterXSize)    # validate type nonNegativeInteger32
        value = find_attr_value_('rasterYSize', node)
        if value is not None and 'rasterYSize' not in already_processed:
            already_processed.add('rasterYSize')
            try:
                self.rasterYSize = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.rasterYSize < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
            self.validate_nonNegativeInteger32(self.rasterYSize)    # validate type nonNegativeInteger32
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SRS':
            SRS_ = child_.text
            SRS_ = self.gds_validate_string(SRS_, node, 'SRS')
            self.SRS.append(SRS_)
        elif nodeName_ == 'GeoTransform':
            GeoTransform_ = child_.text
            GeoTransform_ = self.gds_validate_string(GeoTransform_, node, 'GeoTransform')
            self.GeoTransform.append(GeoTransform_)
        elif nodeName_ == 'GCPList':
            obj_ = GCPListType.factory()
            obj_.build(child_)
            self.GCPList.append(obj_)
            obj_.original_tagname_ = 'GCPList'
        elif nodeName_ == 'BlockXSize':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'BlockXSize')
            self.BlockXSize.append(ival_)
            # validate type nonNegativeInteger32
            self.validate_nonNegativeInteger32(self.BlockXSize[-1])
        elif nodeName_ == 'BlockYSize':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'BlockYSize')
            self.BlockYSize.append(ival_)
            # validate type nonNegativeInteger32
            self.validate_nonNegativeInteger32(self.BlockYSize[-1])
        elif nodeName_ == 'Metadata':
            obj_ = MetadataType.factory()
            obj_.build(child_)
            self.Metadata.append(obj_)
            obj_.original_tagname_ = 'Metadata'
        elif nodeName_ == 'VRTRasterBand':
            obj_ = VRTRasterBandType.factory()
            obj_.build(child_)
            self.VRTRasterBand.append(obj_)
            obj_.original_tagname_ = 'VRTRasterBand'
        elif nodeName_ == 'MaskBand':
            obj_ = MaskBandType.factory()
            obj_.build(child_)
            self.MaskBand.append(obj_)
            obj_.original_tagname_ = 'MaskBand'
        elif nodeName_ == 'GDALWarpOptions':
            obj_ = GDALWarpOptionsType.factory()
            obj_.build(child_)
            self.GDALWarpOptions.append(obj_)
            obj_.original_tagname_ = 'GDALWarpOptions'
        elif nodeName_ == 'PansharpeningOptions':
            obj_ = PansharpeningOptionsType.factory()
            obj_.build(child_)
            self.PansharpeningOptions.append(obj_)
            obj_.original_tagname_ = 'PansharpeningOptions'
# end class VRTDataset


class GCPListType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Projection=None, GCP=None):
        self.original_tagname_ = None
        self.Projection = _cast(None, Projection)
        if GCP is None:
            self.GCP = []
        else:
            self.GCP = GCP
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GCPListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GCPListType.subclass:
            return GCPListType.subclass(*args_, **kwargs_)
        else:
            return GCPListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.GCP
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='GCPListType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GCPListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='GCPListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='GCPListType'):
        if self.Projection is not None and 'Projection' not in already_processed:
            already_processed.add('Projection')
            outfile.write(' Projection=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Projection), input_name='Projection')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='GCPListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for GCP_ in self.GCP:
            GCP_.export(outfile, level, namespace_, name_='GCP', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='GCPListType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Projection is not None and 'Projection' not in already_processed:
            already_processed.add('Projection')
            showIndent(outfile, level)
            outfile.write('Projection="%s",\n' % (self.Projection,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('GCP=[\n')
        level += 1
        for GCP_ in self.GCP:
            showIndent(outfile, level)
            outfile.write('model_.GCPType(\n')
            GCP_.exportLiteral(outfile, level, name_='GCPType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Projection', node)
        if value is not None and 'Projection' not in already_processed:
            already_processed.add('Projection')
            self.Projection = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'GCP':
            obj_ = GCPType.factory()
            obj_.build(child_)
            self.GCP.append(obj_)
            obj_.original_tagname_ = 'GCP'
# end class GCPListType


class GCPType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, Info=None, Pixel=None, Line=None, X=None, Y=None, Z=None, GCPZ=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.Info = _cast(None, Info)
        self.Pixel = _cast(float, Pixel)
        self.Line = _cast(float, Line)
        self.X = _cast(float, X)
        self.Y = _cast(float, Y)
        self.Z = _cast(float, Z)
        self.GCPZ = _cast(float, GCPZ)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GCPType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GCPType.subclass:
            return GCPType.subclass(*args_, **kwargs_)
        else:
            return GCPType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='GCPType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GCPType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='GCPType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='GCPType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Id), input_name='Id')), ))
        if self.Info is not None and 'Info' not in already_processed:
            already_processed.add('Info')
            outfile.write(' Info=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Info), input_name='Info')), ))
        if self.Pixel is not None and 'Pixel' not in already_processed:
            already_processed.add('Pixel')
            outfile.write(' Pixel="%s"' % self.gds_format_double(self.Pixel, input_name='Pixel'))
        if self.Line is not None and 'Line' not in already_processed:
            already_processed.add('Line')
            outfile.write(' Line="%s"' % self.gds_format_double(self.Line, input_name='Line'))
        if self.X is not None and 'X' not in already_processed:
            already_processed.add('X')
            outfile.write(' X="%s"' % self.gds_format_double(self.X, input_name='X'))
        if self.Y is not None and 'Y' not in already_processed:
            already_processed.add('Y')
            outfile.write(' Y="%s"' % self.gds_format_double(self.Y, input_name='Y'))
        if self.Z is not None and 'Z' not in already_processed:
            already_processed.add('Z')
            outfile.write(' Z="%s"' % self.gds_format_double(self.Z, input_name='Z'))
        if self.GCPZ is not None and 'GCPZ' not in already_processed:
            already_processed.add('GCPZ')
            outfile.write(' GCPZ="%s"' % self.gds_format_double(self.GCPZ, input_name='GCPZ'))
    def exportChildren(self, outfile, level, namespace_='', name_='GCPType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='GCPType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            showIndent(outfile, level)
            outfile.write('Id="%s",\n' % (self.Id,))
        if self.Info is not None and 'Info' not in already_processed:
            already_processed.add('Info')
            showIndent(outfile, level)
            outfile.write('Info="%s",\n' % (self.Info,))
        if self.Pixel is not None and 'Pixel' not in already_processed:
            already_processed.add('Pixel')
            showIndent(outfile, level)
            outfile.write('Pixel=%e,\n' % (self.Pixel,))
        if self.Line is not None and 'Line' not in already_processed:
            already_processed.add('Line')
            showIndent(outfile, level)
            outfile.write('Line=%e,\n' % (self.Line,))
        if self.X is not None and 'X' not in already_processed:
            already_processed.add('X')
            showIndent(outfile, level)
            outfile.write('X=%e,\n' % (self.X,))
        if self.Y is not None and 'Y' not in already_processed:
            already_processed.add('Y')
            showIndent(outfile, level)
            outfile.write('Y=%e,\n' % (self.Y,))
        if self.Z is not None and 'Z' not in already_processed:
            already_processed.add('Z')
            showIndent(outfile, level)
            outfile.write('Z=%e,\n' % (self.Z,))
        if self.GCPZ is not None and 'GCPZ' not in already_processed:
            already_processed.add('GCPZ')
            showIndent(outfile, level)
            outfile.write('GCPZ=%e,\n' % (self.GCPZ,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
        value = find_attr_value_('Info', node)
        if value is not None and 'Info' not in already_processed:
            already_processed.add('Info')
            self.Info = value
        value = find_attr_value_('Pixel', node)
        if value is not None and 'Pixel' not in already_processed:
            already_processed.add('Pixel')
            try:
                self.Pixel = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (Pixel): %s' % exp)
        value = find_attr_value_('Line', node)
        if value is not None and 'Line' not in already_processed:
            already_processed.add('Line')
            try:
                self.Line = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (Line): %s' % exp)
        value = find_attr_value_('X', node)
        if value is not None and 'X' not in already_processed:
            already_processed.add('X')
            try:
                self.X = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (X): %s' % exp)
        value = find_attr_value_('Y', node)
        if value is not None and 'Y' not in already_processed:
            already_processed.add('Y')
            try:
                self.Y = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (Y): %s' % exp)
        value = find_attr_value_('Z', node)
        if value is not None and 'Z' not in already_processed:
            already_processed.add('Z')
            try:
                self.Z = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (Z): %s' % exp)
        value = find_attr_value_('GCPZ', node)
        if value is not None and 'GCPZ' not in already_processed:
            already_processed.add('GCPZ')
            try:
                self.GCPZ = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (GCPZ): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class GCPType


class MetadataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, domain=None, format=None, anytypeobjs_=None):
        self.original_tagname_ = None
        self.domain = _cast(None, domain)
        self.format = _cast(None, format)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MetadataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MetadataType.subclass:
            return MetadataType.subclass(*args_, **kwargs_)
        else:
            return MetadataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MetadataType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MetadataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MetadataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MetadataType'):
        if self.domain is not None and 'domain' not in already_processed:
            already_processed.add('domain')
            outfile.write(' domain=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.domain), input_name='domain')), ))
        if self.format is not None and 'format' not in already_processed:
            already_processed.add('format')
            outfile.write(' format=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.format), input_name='format')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='MetadataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='MetadataType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.domain is not None and 'domain' not in already_processed:
            already_processed.add('domain')
            showIndent(outfile, level)
            outfile.write('domain="%s",\n' % (self.domain,))
        if self.format is not None and 'format' not in already_processed:
            already_processed.add('format')
            showIndent(outfile, level)
            outfile.write('format="%s",\n' % (self.format,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('anytypeobjs_=[\n')
        level += 1
        for anytypeobjs_ in self.anytypeobjs_:
            anytypeobjs_.exportLiteral(outfile, level)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('domain', node)
        if value is not None and 'domain' not in already_processed:
            already_processed.add('domain')
            self.domain = value
        value = find_attr_value_('format', node)
        if value is not None and 'format' not in already_processed:
            already_processed.add('format')
            self.format = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        obj_ = self.gds_build_any(child_, 'MetadataType')
        if obj_ is not None:
            self.add_anytypeobjs_(obj_)
# end class MetadataType


class GDALWarpOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, anytypeobjs_=None):
        self.original_tagname_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GDALWarpOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GDALWarpOptionsType.subclass:
            return GDALWarpOptionsType.subclass(*args_, **kwargs_)
        else:
            return GDALWarpOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='GDALWarpOptionsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GDALWarpOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='GDALWarpOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='GDALWarpOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='GDALWarpOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='GDALWarpOptionsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('anytypeobjs_=[\n')
        level += 1
        for anytypeobjs_ in self.anytypeobjs_:
            anytypeobjs_.exportLiteral(outfile, level)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        obj_ = self.gds_build_any(child_, 'GDALWarpOptionsType')
        if obj_ is not None:
            self.add_anytypeobjs_(obj_)
# end class GDALWarpOptionsType


class PansharpeningOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, AlgorithmOptions=None, Resampling=None, NumThreads=None, BitDepth=None, NoData=None, SpatialExtentAdjustment=None, PanchroBand=None, SpectralBand=None):
        self.original_tagname_ = None
        self.Algorithm = Algorithm
        self.AlgorithmOptions = AlgorithmOptions
        self.Resampling = Resampling
        self.NumThreads = NumThreads
        self.BitDepth = BitDepth
        self.NoData = NoData
        self.validate_NoDataOrNoneType(self.NoData)
        self.SpatialExtentAdjustment = SpatialExtentAdjustment
        self.PanchroBand = PanchroBand
        if SpectralBand is None:
            self.SpectralBand = []
        else:
            self.SpectralBand = SpectralBand
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PansharpeningOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PansharpeningOptionsType.subclass:
            return PansharpeningOptionsType.subclass(*args_, **kwargs_)
        else:
            return PansharpeningOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_NoDataOrNoneType(self, value):
        # Validate type NoDataOrNoneType, a restriction on None.
        pass
    def hasContent_(self):
        if (
            self.Algorithm is not None or
            self.AlgorithmOptions is not None or
            self.Resampling is not None or
            self.NumThreads is not None or
            self.BitDepth is not None or
            self.NoData is not None or
            self.SpatialExtentAdjustment is not None or
            self.PanchroBand is not None or
            self.SpectralBand
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PansharpeningOptionsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PansharpeningOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PansharpeningOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PansharpeningOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PansharpeningOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Algorithm is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlgorithm>%s</%sAlgorithm>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Algorithm), input_name='Algorithm')), namespace_, eol_))
        if self.AlgorithmOptions is not None:
            self.AlgorithmOptions.export(outfile, level, namespace_, name_='AlgorithmOptions', pretty_print=pretty_print)
        if self.Resampling is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResampling>%s</%sResampling>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Resampling), input_name='Resampling')), namespace_, eol_))
        if self.NumThreads is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumThreads>%s</%sNumThreads>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NumThreads), input_name='NumThreads')), namespace_, eol_))
        if self.BitDepth is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBitDepth>%s</%sBitDepth>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.BitDepth), input_name='BitDepth')), namespace_, eol_))
        if self.NoData is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoData>%s</%sNoData>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NoData), input_name='NoData')), namespace_, eol_))
        if self.SpatialExtentAdjustment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpatialExtentAdjustment>%s</%sSpatialExtentAdjustment>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SpatialExtentAdjustment), input_name='SpatialExtentAdjustment')), namespace_, eol_))
        if self.PanchroBand is not None:
            self.PanchroBand.export(outfile, level, namespace_, name_='PanchroBand', pretty_print=pretty_print)
        for SpectralBand_ in self.SpectralBand:
            SpectralBand_.export(outfile, level, namespace_, name_='SpectralBand', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='PansharpeningOptionsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Algorithm is not None:
            showIndent(outfile, level)
            outfile.write('Algorithm=%s,\n' % self.gds_encode(quote_python(self.Algorithm)))
        if self.AlgorithmOptions is not None:
            showIndent(outfile, level)
            outfile.write('AlgorithmOptions=model_.AlgorithmOptionsType(\n')
            self.AlgorithmOptions.exportLiteral(outfile, level, name_='AlgorithmOptions')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Resampling is not None:
            showIndent(outfile, level)
            outfile.write('Resampling=%s,\n' % self.gds_encode(quote_python(self.Resampling)))
        if self.NumThreads is not None:
            showIndent(outfile, level)
            outfile.write('NumThreads=%s,\n' % self.gds_encode(quote_python(self.NumThreads)))
        if self.BitDepth is not None:
            showIndent(outfile, level)
            outfile.write('BitDepth=%s,\n' % self.gds_encode(quote_python(self.BitDepth)))
        if self.NoData is not None:
            showIndent(outfile, level)
            outfile.write('NoData=%s,\n' % self.gds_encode(quote_python(self.NoData)))
        if self.SpatialExtentAdjustment is not None:
            showIndent(outfile, level)
            outfile.write('SpatialExtentAdjustment=%s,\n' % self.gds_encode(quote_python(self.SpatialExtentAdjustment)))
        if self.PanchroBand is not None:
            showIndent(outfile, level)
            outfile.write('PanchroBand=model_.PanchroBandType(\n')
            self.PanchroBand.exportLiteral(outfile, level, name_='PanchroBand')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('SpectralBand=[\n')
        level += 1
        for SpectralBand_ in self.SpectralBand:
            showIndent(outfile, level)
            outfile.write('model_.SpectralBandType(\n')
            SpectralBand_.exportLiteral(outfile, level, name_='SpectralBandType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Algorithm':
            Algorithm_ = child_.text
            Algorithm_ = self.gds_validate_string(Algorithm_, node, 'Algorithm')
            self.Algorithm = Algorithm_
        elif nodeName_ == 'AlgorithmOptions':
            obj_ = AlgorithmOptionsType.factory()
            obj_.build(child_)
            self.AlgorithmOptions = obj_
            obj_.original_tagname_ = 'AlgorithmOptions'
        elif nodeName_ == 'Resampling':
            Resampling_ = child_.text
            Resampling_ = self.gds_validate_string(Resampling_, node, 'Resampling')
            self.Resampling = Resampling_
        elif nodeName_ == 'NumThreads':
            NumThreads_ = child_.text
            NumThreads_ = self.gds_validate_string(NumThreads_, node, 'NumThreads')
            self.NumThreads = NumThreads_
        elif nodeName_ == 'BitDepth':
            BitDepth_ = child_.text
            BitDepth_ = self.gds_validate_string(BitDepth_, node, 'BitDepth')
            self.BitDepth = BitDepth_
        elif nodeName_ == 'NoData':
            NoData_ = child_.text
            NoData_ = self.gds_validate_string(NoData_, node, 'NoData')
            self.NoData = NoData_
            # validate type NoDataOrNoneType
            self.validate_NoDataOrNoneType(self.NoData)
        elif nodeName_ == 'SpatialExtentAdjustment':
            SpatialExtentAdjustment_ = child_.text
            SpatialExtentAdjustment_ = self.gds_validate_string(SpatialExtentAdjustment_, node, 'SpatialExtentAdjustment')
            self.SpatialExtentAdjustment = SpatialExtentAdjustment_
        elif nodeName_ == 'PanchroBand':
            obj_ = PanchroBandType.factory()
            obj_.build(child_)
            self.PanchroBand = obj_
            obj_.original_tagname_ = 'PanchroBand'
        elif nodeName_ == 'SpectralBand':
            obj_ = SpectralBandType.factory()
            obj_.build(child_)
            self.SpectralBand.append(obj_)
            obj_.original_tagname_ = 'SpectralBand'
# end class PansharpeningOptionsType


class PanchroBandType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SourceFilename=None, SourceBand=None):
        self.original_tagname_ = None
        self.SourceFilename = SourceFilename
        self.SourceBand = SourceBand
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PanchroBandType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PanchroBandType.subclass:
            return PanchroBandType.subclass(*args_, **kwargs_)
        else:
            return PanchroBandType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.SourceFilename is not None or
            self.SourceBand is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PanchroBandType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PanchroBandType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PanchroBandType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PanchroBandType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PanchroBandType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SourceFilename is not None:
            self.SourceFilename.export(outfile, level, namespace_, name_='SourceFilename', pretty_print=pretty_print)
        if self.SourceBand is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSourceBand>%s</%sSourceBand>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SourceBand), input_name='SourceBand')), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='PanchroBandType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.SourceFilename is not None:
            showIndent(outfile, level)
            outfile.write('SourceFilename=model_.SourceFilenameType(\n')
            self.SourceFilename.exportLiteral(outfile, level, name_='SourceFilename')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SourceBand is not None:
            showIndent(outfile, level)
            outfile.write('SourceBand=%s,\n' % self.gds_encode(quote_python(self.SourceBand)))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SourceFilename':
            obj_ = SourceFilenameType.factory()
            obj_.build(child_)
            self.SourceFilename = obj_
            obj_.original_tagname_ = 'SourceFilename'
        elif nodeName_ == 'SourceBand':
            SourceBand_ = child_.text
            SourceBand_ = self.gds_validate_string(SourceBand_, node, 'SourceBand')
            self.SourceBand = SourceBand_
# end class PanchroBandType


class SpectralBandType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dstBand=None, SourceFilename=None, SourceBand=None):
        self.original_tagname_ = None
        self.dstBand = _cast(int, dstBand)
        self.SourceFilename = SourceFilename
        self.SourceBand = SourceBand
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SpectralBandType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SpectralBandType.subclass:
            return SpectralBandType.subclass(*args_, **kwargs_)
        else:
            return SpectralBandType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.SourceFilename is not None or
            self.SourceBand is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SpectralBandType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SpectralBandType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SpectralBandType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SpectralBandType'):
        if self.dstBand is not None and 'dstBand' not in already_processed:
            already_processed.add('dstBand')
            outfile.write(' dstBand="%s"' % self.gds_format_integer(self.dstBand, input_name='dstBand'))
    def exportChildren(self, outfile, level, namespace_='', name_='SpectralBandType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SourceFilename is not None:
            self.SourceFilename.export(outfile, level, namespace_, name_='SourceFilename', pretty_print=pretty_print)
        if self.SourceBand is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSourceBand>%s</%sSourceBand>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SourceBand), input_name='SourceBand')), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='SpectralBandType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.dstBand is not None and 'dstBand' not in already_processed:
            already_processed.add('dstBand')
            showIndent(outfile, level)
            outfile.write('dstBand=%d,\n' % (self.dstBand,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.SourceFilename is not None:
            showIndent(outfile, level)
            outfile.write('SourceFilename=model_.SourceFilenameType(\n')
            self.SourceFilename.exportLiteral(outfile, level, name_='SourceFilename')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SourceBand is not None:
            showIndent(outfile, level)
            outfile.write('SourceBand=%s,\n' % self.gds_encode(quote_python(self.SourceBand)))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dstBand', node)
        if value is not None and 'dstBand' not in already_processed:
            already_processed.add('dstBand')
            try:
                self.dstBand = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.dstBand < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SourceFilename':
            obj_ = SourceFilenameType.factory()
            obj_.build(child_)
            self.SourceFilename = obj_
            obj_.original_tagname_ = 'SourceFilename'
        elif nodeName_ == 'SourceBand':
            SourceBand_ = child_.text
            SourceBand_ = self.gds_validate_string(SourceBand_, node, 'SourceBand')
            self.SourceBand = SourceBand_
# end class SpectralBandType


class AlgorithmOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, anytypeobjs_=None):
        self.original_tagname_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AlgorithmOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AlgorithmOptionsType.subclass:
            return AlgorithmOptionsType.subclass(*args_, **kwargs_)
        else:
            return AlgorithmOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AlgorithmOptionsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AlgorithmOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AlgorithmOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AlgorithmOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AlgorithmOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='AlgorithmOptionsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('anytypeobjs_=[\n')
        level += 1
        for anytypeobjs_ in self.anytypeobjs_:
            anytypeobjs_.exportLiteral(outfile, level)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        obj_ = self.gds_build_any(child_, 'AlgorithmOptionsType')
        if obj_ is not None:
            self.add_anytypeobjs_(obj_)
# end class AlgorithmOptionsType


class MDIType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, key=None, valueOf_=None):
        self.original_tagname_ = None
        self.key = _cast(None, key)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MDIType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MDIType.subclass:
            return MDIType.subclass(*args_, **kwargs_)
        else:
            return MDIType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MDIType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MDIType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write((quote_xml(self.valueOf_) if type(self.valueOf_) is str else self.gds_encode(str(self.valueOf_))))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MDIType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MDIType'):
        if self.key is not None and 'key' not in already_processed:
            already_processed.add('key')
            outfile.write(' key=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.key), input_name='key')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='MDIType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='MDIType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.key is not None and 'key' not in already_processed:
            already_processed.add('key')
            showIndent(outfile, level)
            outfile.write('key="%s",\n' % (self.key,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('key', node)
        if value is not None and 'key' not in already_processed:
            already_processed.add('key')
            self.key = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MDIType


class VRTRasterBandType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dataType=None, band=None, subClass=None, BlockXSize=None, BlockYSize=None, Description=None, UnitType=None, Offset=None, Scale=None, CategoryNames=None, ColorTable=None, NoDataValue=None, NodataValue=None, HideNoDataValue=None, Metadata=None, ColorInterp=None, Overview=None, MaskBand=None, Histograms=None, SimpleSource=None, ComplexSource=None, AveragedSource=None, KernelFilteredSource=None, PixelFunctionType=None, SourceTransferType=None, PixelFunctionLanguage=None, PixelFunctionCode=None, PixelFunctionArguments=None, BufferRadius=None, SourceFilename=None, ImageOffset=None, PixelOffset=None, LineOffset=None, ByteOrder=None):
        self.original_tagname_ = None
        self.dataType = _cast(None, dataType)
        self.band = _cast(int, band)
        self.subClass = _cast(None, subClass)
        self.BlockXSize = _cast(int, BlockXSize)
        self.BlockYSize = _cast(int, BlockYSize)
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
        if UnitType is None:
            self.UnitType = []
        else:
            self.UnitType = UnitType
        if Offset is None:
            self.Offset = []
        else:
            self.Offset = Offset
        if Scale is None:
            self.Scale = []
        else:
            self.Scale = Scale
        if CategoryNames is None:
            self.CategoryNames = []
        else:
            self.CategoryNames = CategoryNames
        if ColorTable is None:
            self.ColorTable = []
        else:
            self.ColorTable = ColorTable
        if NoDataValue is None:
            self.NoDataValue = []
        else:
            self.NoDataValue = NoDataValue
        if NodataValue is None:
            self.NodataValue = []
        else:
            self.NodataValue = NodataValue
        if HideNoDataValue is None:
            self.HideNoDataValue = []
        else:
            self.HideNoDataValue = HideNoDataValue
        if Metadata is None:
            self.Metadata = []
        else:
            self.Metadata = Metadata
        if ColorInterp is None:
            self.ColorInterp = []
        else:
            self.ColorInterp = ColorInterp
        if Overview is None:
            self.Overview = []
        else:
            self.Overview = Overview
        if MaskBand is None:
            self.MaskBand = []
        else:
            self.MaskBand = MaskBand
        if Histograms is None:
            self.Histograms = []
        else:
            self.Histograms = Histograms
        if SimpleSource is None:
            self.SimpleSource = []
        else:
            self.SimpleSource = SimpleSource
        if ComplexSource is None:
            self.ComplexSource = []
        else:
            self.ComplexSource = ComplexSource
        if AveragedSource is None:
            self.AveragedSource = []
        else:
            self.AveragedSource = AveragedSource
        if KernelFilteredSource is None:
            self.KernelFilteredSource = []
        else:
            self.KernelFilteredSource = KernelFilteredSource
        if PixelFunctionType is None:
            self.PixelFunctionType = []
        else:
            self.PixelFunctionType = PixelFunctionType
        if SourceTransferType is None:
            self.SourceTransferType = []
        else:
            self.SourceTransferType = SourceTransferType
        if PixelFunctionLanguage is None:
            self.PixelFunctionLanguage = []
        else:
            self.PixelFunctionLanguage = PixelFunctionLanguage
        if PixelFunctionCode is None:
            self.PixelFunctionCode = []
        else:
            self.PixelFunctionCode = PixelFunctionCode
        if PixelFunctionArguments is None:
            self.PixelFunctionArguments = []
        else:
            self.PixelFunctionArguments = PixelFunctionArguments
        if BufferRadius is None:
            self.BufferRadius = []
        else:
            self.BufferRadius = BufferRadius
        if SourceFilename is None:
            self.SourceFilename = []
        else:
            self.SourceFilename = SourceFilename
        if ImageOffset is None:
            self.ImageOffset = []
        else:
            self.ImageOffset = ImageOffset
        if PixelOffset is None:
            self.PixelOffset = []
        else:
            self.PixelOffset = PixelOffset
        if LineOffset is None:
            self.LineOffset = []
        else:
            self.LineOffset = LineOffset
        if ByteOrder is None:
            self.ByteOrder = []
        else:
            self.ByteOrder = ByteOrder
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VRTRasterBandType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VRTRasterBandType.subclass:
            return VRTRasterBandType.subclass(*args_, **kwargs_)
        else:
            return VRTRasterBandType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_DoubleOrNanType(self, value):
        # Validate type DoubleOrNanType, a restriction on None.
        pass
    def validate_ZeroOrOne(self, value):
        # Validate type ZeroOrOne, a restriction on xs:integer.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ZeroOrOne' % {"value" : value.encode("utf-8")} )
    def validate_ColorInterpType(self, value):
        # Validate type ColorInterpType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Gray', 'Palette', 'Red', 'Green', 'Blue', 'Alpha', 'Hue', 'Saturation', 'Lightness', 'Cyan', 'Magenta', 'Yellow', 'Black', 'YCbCr_Y', 'YCbCr_Cb', 'YCbCr_Cr', 'Undefined']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ColorInterpType' % {"value" : value.encode("utf-8")} )
    def validate_DataTypeType(self, value):
        # Validate type DataTypeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Byte', 'UInt16', 'Int16', 'UInt32', 'Int32', 'Float32', 'Float64', 'CInt16', 'CInt32', 'CFloat32', 'CFloat64']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DataTypeType' % {"value" : value.encode("utf-8")} )
    def validate_VRTRasterBandSubClassType(self, value):
        # Validate type VRTRasterBandSubClassType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['VRTWarpedRasterBand', 'VRTDerivedRasterBand', 'VRTRawRasterBand', 'VRTPansharpenedRasterBand']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on VRTRasterBandSubClassType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Description or
            self.UnitType or
            self.Offset or
            self.Scale or
            self.CategoryNames or
            self.ColorTable or
            self.NoDataValue or
            self.NodataValue or
            self.HideNoDataValue or
            self.Metadata or
            self.ColorInterp or
            self.Overview or
            self.MaskBand or
            self.Histograms or
            self.SimpleSource or
            self.ComplexSource or
            self.AveragedSource or
            self.KernelFilteredSource or
            self.PixelFunctionType or
            self.SourceTransferType or
            self.PixelFunctionLanguage or
            self.PixelFunctionCode or
            self.PixelFunctionArguments or
            self.BufferRadius or
            self.SourceFilename or
            self.ImageOffset or
            self.PixelOffset or
            self.LineOffset or
            self.ByteOrder
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='VRTRasterBandType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VRTRasterBandType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='VRTRasterBandType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='VRTRasterBandType'):
        if self.dataType is not None and 'dataType' not in already_processed:
            already_processed.add('dataType')
            outfile.write(' dataType=%s' % (quote_attrib(self.dataType), ))
        if self.band is not None and 'band' not in already_processed:
            already_processed.add('band')
            outfile.write(' band="%s"' % self.gds_format_integer(self.band, input_name='band'))
        if self.subClass is not None and 'subClass' not in already_processed:
            already_processed.add('subClass')
            outfile.write(' subClass=%s' % (quote_attrib(self.subClass), ))
        if self.BlockXSize is not None and 'BlockXSize' not in already_processed:
            already_processed.add('BlockXSize')
            outfile.write(' BlockXSize="%s"' % self.gds_format_integer(self.BlockXSize, input_name='BlockXSize'))
        if self.BlockYSize is not None and 'BlockYSize' not in already_processed:
            already_processed.add('BlockYSize')
            outfile.write(' BlockYSize="%s"' % self.gds_format_integer(self.BlockYSize, input_name='BlockYSize'))
    def exportChildren(self, outfile, level, namespace_='', name_='VRTRasterBandType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Description_ in self.Description:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(Description_), input_name='Description')), namespace_, eol_))
        for UnitType_ in self.UnitType:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitType>%s</%sUnitType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(UnitType_), input_name='UnitType')), namespace_, eol_))
        for Offset_ in self.Offset:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOffset>%s</%sOffset>%s' % (namespace_, self.gds_format_double(Offset_, input_name='Offset'), namespace_, eol_))
        for Scale_ in self.Scale:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sScale>%s</%sScale>%s' % (namespace_, self.gds_format_double(Scale_, input_name='Scale'), namespace_, eol_))
        for CategoryNames_ in self.CategoryNames:
            CategoryNames_.export(outfile, level, namespace_, name_='CategoryNames', pretty_print=pretty_print)
        for ColorTable_ in self.ColorTable:
            ColorTable_.export(outfile, level, namespace_, name_='ColorTable', pretty_print=pretty_print)
        for NoDataValue_ in self.NoDataValue:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoDataValue>%s</%sNoDataValue>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(NoDataValue_), input_name='NoDataValue')), namespace_, eol_))
        for NodataValue_ in self.NodataValue:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNodataValue>%s</%sNodataValue>%s' % (namespace_, self.gds_format_double(NodataValue_, input_name='NodataValue'), namespace_, eol_))
        for HideNoDataValue_ in self.HideNoDataValue:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHideNoDataValue>%s</%sHideNoDataValue>%s' % (namespace_, self.gds_format_integer(HideNoDataValue_, input_name='HideNoDataValue'), namespace_, eol_))
        for Metadata_ in self.Metadata:
            Metadata_.export(outfile, level, namespace_, name_='Metadata', pretty_print=pretty_print)
        for ColorInterp_ in self.ColorInterp:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sColorInterp>%s</%sColorInterp>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(ColorInterp_), input_name='ColorInterp')), namespace_, eol_))
        for Overview_ in self.Overview:
            Overview_.export(outfile, level, namespace_, name_='Overview', pretty_print=pretty_print)
        for MaskBand_ in self.MaskBand:
            MaskBand_.export(outfile, level, namespace_, name_='MaskBand', pretty_print=pretty_print)
        for Histograms_ in self.Histograms:
            Histograms_.export(outfile, level, namespace_, name_='Histograms', pretty_print=pretty_print)
        for SimpleSource_ in self.SimpleSource:
            SimpleSource_.export(outfile, level, namespace_, name_='SimpleSource', pretty_print=pretty_print)
        for ComplexSource_ in self.ComplexSource:
            ComplexSource_.export(outfile, level, namespace_, name_='ComplexSource', pretty_print=pretty_print)
        for AveragedSource_ in self.AveragedSource:
            AveragedSource_.export(outfile, level, namespace_, name_='AveragedSource', pretty_print=pretty_print)
        for KernelFilteredSource_ in self.KernelFilteredSource:
            KernelFilteredSource_.export(outfile, level, namespace_, name_='KernelFilteredSource', pretty_print=pretty_print)
        for PixelFunctionType_ in self.PixelFunctionType:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPixelFunctionType>%s</%sPixelFunctionType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(PixelFunctionType_), input_name='PixelFunctionType')), namespace_, eol_))
        for SourceTransferType_ in self.SourceTransferType:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSourceTransferType>%s</%sSourceTransferType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(SourceTransferType_), input_name='SourceTransferType')), namespace_, eol_))
        for PixelFunctionLanguage_ in self.PixelFunctionLanguage:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPixelFunctionLanguage>%s</%sPixelFunctionLanguage>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(PixelFunctionLanguage_), input_name='PixelFunctionLanguage')), namespace_, eol_))
        for PixelFunctionCode_ in self.PixelFunctionCode:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPixelFunctionCode>%s</%sPixelFunctionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(PixelFunctionCode_), input_name='PixelFunctionCode')), namespace_, eol_))
        for PixelFunctionArguments_ in self.PixelFunctionArguments:
            PixelFunctionArguments_.export(outfile, level, namespace_, name_='PixelFunctionArguments', pretty_print=pretty_print)
        for BufferRadius_ in self.BufferRadius:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBufferRadius>%s</%sBufferRadius>%s' % (namespace_, self.gds_format_integer(BufferRadius_, input_name='BufferRadius'), namespace_, eol_))
        for SourceFilename_ in self.SourceFilename:
            SourceFilename_.export(outfile, level, namespace_, name_='SourceFilename', pretty_print=pretty_print)
        for ImageOffset_ in self.ImageOffset:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImageOffset>%s</%sImageOffset>%s' % (namespace_, self.gds_format_integer(ImageOffset_, input_name='ImageOffset'), namespace_, eol_))
        for PixelOffset_ in self.PixelOffset:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPixelOffset>%s</%sPixelOffset>%s' % (namespace_, self.gds_format_integer(PixelOffset_, input_name='PixelOffset'), namespace_, eol_))
        for LineOffset_ in self.LineOffset:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLineOffset>%s</%sLineOffset>%s' % (namespace_, self.gds_format_integer(LineOffset_, input_name='LineOffset'), namespace_, eol_))
        for ByteOrder_ in self.ByteOrder:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sByteOrder>%s</%sByteOrder>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(ByteOrder_), input_name='ByteOrder')), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='VRTRasterBandType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.dataType is not None and 'dataType' not in already_processed:
            already_processed.add('dataType')
            showIndent(outfile, level)
            outfile.write('dataType="%s",\n' % (self.dataType,))
        if self.band is not None and 'band' not in already_processed:
            already_processed.add('band')
            showIndent(outfile, level)
            outfile.write('band=%d,\n' % (self.band,))
        if self.subClass is not None and 'subClass' not in already_processed:
            already_processed.add('subClass')
            showIndent(outfile, level)
            outfile.write('subClass="%s",\n' % (self.subClass,))
        if self.BlockXSize is not None and 'BlockXSize' not in already_processed:
            already_processed.add('BlockXSize')
            showIndent(outfile, level)
            outfile.write('BlockXSize=%d,\n' % (self.BlockXSize,))
        if self.BlockYSize is not None and 'BlockYSize' not in already_processed:
            already_processed.add('BlockYSize')
            showIndent(outfile, level)
            outfile.write('BlockYSize=%d,\n' % (self.BlockYSize,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Description=[\n')
        level += 1
        for Description_ in self.Description:
            showIndent(outfile, level)
            outfile.write('%s,\n' % self.gds_encode(quote_python(Description_)))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('UnitType=[\n')
        level += 1
        for UnitType_ in self.UnitType:
            showIndent(outfile, level)
            outfile.write('%s,\n' % self.gds_encode(quote_python(UnitType_)))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Offset=[\n')
        level += 1
        for Offset_ in self.Offset:
            showIndent(outfile, level)
            outfile.write('%e,\n' % Offset_)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Scale=[\n')
        level += 1
        for Scale_ in self.Scale:
            showIndent(outfile, level)
            outfile.write('%e,\n' % Scale_)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('CategoryNames=[\n')
        level += 1
        for CategoryNames_ in self.CategoryNames:
            showIndent(outfile, level)
            outfile.write('model_.CategoryNamesType(\n')
            CategoryNames_.exportLiteral(outfile, level, name_='CategoryNamesType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ColorTable=[\n')
        level += 1
        for ColorTable_ in self.ColorTable:
            showIndent(outfile, level)
            outfile.write('model_.ColorTableType(\n')
            ColorTable_.exportLiteral(outfile, level, name_='ColorTableType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('NoDataValue=[\n')
        level += 1
        for NoDataValue_ in self.NoDataValue:
            showIndent(outfile, level)
            outfile.write('%s,\n' % self.gds_encode(quote_python(NoDataValue_)))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('NodataValue=[\n')
        level += 1
        for NodataValue_ in self.NodataValue:
            showIndent(outfile, level)
            outfile.write('%e,\n' % NodataValue_)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('HideNoDataValue=[\n')
        level += 1
        for HideNoDataValue_ in self.HideNoDataValue:
            showIndent(outfile, level)
            outfile.write('%d,\n' % HideNoDataValue_)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Metadata=[\n')
        level += 1
        for Metadata_ in self.Metadata:
            showIndent(outfile, level)
            outfile.write('model_.MetadataType(\n')
            Metadata_.exportLiteral(outfile, level, name_='MetadataType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ColorInterp=[\n')
        level += 1
        for ColorInterp_ in self.ColorInterp:
            showIndent(outfile, level)
            outfile.write('%s,\n' % self.gds_encode(quote_python(ColorInterp_)))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Overview=[\n')
        level += 1
        for Overview_ in self.Overview:
            showIndent(outfile, level)
            outfile.write('model_.OverviewType(\n')
            Overview_.exportLiteral(outfile, level, name_='OverviewType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('MaskBand=[\n')
        level += 1
        for MaskBand_ in self.MaskBand:
            showIndent(outfile, level)
            outfile.write('model_.MaskBandType(\n')
            MaskBand_.exportLiteral(outfile, level, name_='MaskBandType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Histograms=[\n')
        level += 1
        for Histograms_ in self.Histograms:
            showIndent(outfile, level)
            outfile.write('model_.HistogramsType(\n')
            Histograms_.exportLiteral(outfile, level, name_='HistogramsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SimpleSource=[\n')
        level += 1
        for SimpleSource_ in self.SimpleSource:
            showIndent(outfile, level)
            outfile.write('model_.SimpleSourceType(\n')
            SimpleSource_.exportLiteral(outfile, level, name_='SimpleSourceType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ComplexSource=[\n')
        level += 1
        for ComplexSource_ in self.ComplexSource:
            showIndent(outfile, level)
            outfile.write('model_.ComplexSourceType(\n')
            ComplexSource_.exportLiteral(outfile, level, name_='ComplexSourceType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('AveragedSource=[\n')
        level += 1
        for AveragedSource_ in self.AveragedSource:
            showIndent(outfile, level)
            outfile.write('model_.SimpleSourceType(\n')
            AveragedSource_.exportLiteral(outfile, level, name_='SimpleSourceType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('KernelFilteredSource=[\n')
        level += 1
        for KernelFilteredSource_ in self.KernelFilteredSource:
            showIndent(outfile, level)
            outfile.write('model_.KernelFilteredSourceType(\n')
            KernelFilteredSource_.exportLiteral(outfile, level, name_='KernelFilteredSourceType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('PixelFunctionType=[\n')
        level += 1
        for PixelFunctionType_ in self.PixelFunctionType:
            showIndent(outfile, level)
            outfile.write('%s,\n' % self.gds_encode(quote_python(PixelFunctionType_)))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SourceTransferType=[\n')
        level += 1
        for SourceTransferType_ in self.SourceTransferType:
            showIndent(outfile, level)
            outfile.write('%s,\n' % self.gds_encode(quote_python(SourceTransferType_)))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('PixelFunctionLanguage=[\n')
        level += 1
        for PixelFunctionLanguage_ in self.PixelFunctionLanguage:
            showIndent(outfile, level)
            outfile.write('%s,\n' % self.gds_encode(quote_python(PixelFunctionLanguage_)))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('PixelFunctionCode=[\n')
        level += 1
        for PixelFunctionCode_ in self.PixelFunctionCode:
            showIndent(outfile, level)
            outfile.write('%s,\n' % self.gds_encode(quote_python(PixelFunctionCode_)))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('PixelFunctionArguments=[\n')
        level += 1
        for PixelFunctionArguments_ in self.PixelFunctionArguments:
            showIndent(outfile, level)
            outfile.write('model_.PixelFunctionArgumentsType(\n')
            PixelFunctionArguments_.exportLiteral(outfile, level, name_='PixelFunctionArgumentsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('BufferRadius=[\n')
        level += 1
        for BufferRadius_ in self.BufferRadius:
            showIndent(outfile, level)
            outfile.write('%d,\n' % BufferRadius_)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SourceFilename=[\n')
        level += 1
        for SourceFilename_ in self.SourceFilename:
            showIndent(outfile, level)
            outfile.write('model_.SourceFilenameType(\n')
            SourceFilename_.exportLiteral(outfile, level, name_='SourceFilenameType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ImageOffset=[\n')
        level += 1
        for ImageOffset_ in self.ImageOffset:
            showIndent(outfile, level)
            outfile.write('%d,\n' % ImageOffset_)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('PixelOffset=[\n')
        level += 1
        for PixelOffset_ in self.PixelOffset:
            showIndent(outfile, level)
            outfile.write('%d,\n' % PixelOffset_)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('LineOffset=[\n')
        level += 1
        for LineOffset_ in self.LineOffset:
            showIndent(outfile, level)
            outfile.write('%d,\n' % LineOffset_)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ByteOrder=[\n')
        level += 1
        for ByteOrder_ in self.ByteOrder:
            showIndent(outfile, level)
            outfile.write('%s,\n' % self.gds_encode(quote_python(ByteOrder_)))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dataType', node)
        if value is not None and 'dataType' not in already_processed:
            already_processed.add('dataType')
            self.dataType = value
            self.validate_DataTypeType(self.dataType)    # validate type DataTypeType
        value = find_attr_value_('band', node)
        if value is not None and 'band' not in already_processed:
            already_processed.add('band')
            try:
                self.band = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('subClass', node)
        if value is not None and 'subClass' not in already_processed:
            already_processed.add('subClass')
            self.subClass = value
            self.validate_VRTRasterBandSubClassType(self.subClass)    # validate type VRTRasterBandSubClassType
        value = find_attr_value_('BlockXSize', node)
        if value is not None and 'BlockXSize' not in already_processed:
            already_processed.add('BlockXSize')
            try:
                self.BlockXSize = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('BlockYSize', node)
        if value is not None and 'BlockYSize' not in already_processed:
            already_processed.add('BlockYSize')
            try:
                self.BlockYSize = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description.append(Description_)
        elif nodeName_ == 'UnitType':
            UnitType_ = child_.text
            UnitType_ = self.gds_validate_string(UnitType_, node, 'UnitType')
            self.UnitType.append(UnitType_)
        elif nodeName_ == 'Offset':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Offset')
            self.Offset.append(fval_)
        elif nodeName_ == 'Scale':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Scale')
            self.Scale.append(fval_)
        elif nodeName_ == 'CategoryNames':
            obj_ = CategoryNamesType.factory()
            obj_.build(child_)
            self.CategoryNames.append(obj_)
            obj_.original_tagname_ = 'CategoryNames'
        elif nodeName_ == 'ColorTable':
            obj_ = ColorTableType.factory()
            obj_.build(child_)
            self.ColorTable.append(obj_)
            obj_.original_tagname_ = 'ColorTable'
        elif nodeName_ == 'NoDataValue':
            NoDataValue_ = child_.text
            NoDataValue_ = self.gds_validate_string(NoDataValue_, node, 'NoDataValue')
            self.NoDataValue.append(NoDataValue_)
            # validate type DoubleOrNanType
            self.validate_DoubleOrNanType(self.NoDataValue[-1])
        elif nodeName_ == 'NodataValue':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'NodataValue')
            self.NodataValue.append(fval_)
        elif nodeName_ == 'HideNoDataValue':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'HideNoDataValue')
            self.HideNoDataValue.append(ival_)
            # validate type ZeroOrOne
            self.validate_ZeroOrOne(self.HideNoDataValue[-1])
        elif nodeName_ == 'Metadata':
            obj_ = MetadataType.factory()
            obj_.build(child_)
            self.Metadata.append(obj_)
            obj_.original_tagname_ = 'Metadata'
        elif nodeName_ == 'ColorInterp':
            ColorInterp_ = child_.text
            ColorInterp_ = self.gds_validate_string(ColorInterp_, node, 'ColorInterp')
            self.ColorInterp.append(ColorInterp_)
            # validate type ColorInterpType
            self.validate_ColorInterpType(self.ColorInterp[-1])
        elif nodeName_ == 'Overview':
            obj_ = OverviewType.factory()
            obj_.build(child_)
            self.Overview.append(obj_)
            obj_.original_tagname_ = 'Overview'
        elif nodeName_ == 'MaskBand':
            obj_ = MaskBandType.factory()
            obj_.build(child_)
            self.MaskBand.append(obj_)
            obj_.original_tagname_ = 'MaskBand'
        elif nodeName_ == 'Histograms':
            obj_ = HistogramsType.factory()
            obj_.build(child_)
            self.Histograms.append(obj_)
            obj_.original_tagname_ = 'Histograms'
        elif nodeName_ == 'SimpleSource':
            obj_ = SimpleSourceType.factory()
            obj_.build(child_)
            self.SimpleSource.append(obj_)
            obj_.original_tagname_ = 'SimpleSource'
        elif nodeName_ == 'ComplexSource':
            obj_ = ComplexSourceType.factory()
            obj_.build(child_)
            self.ComplexSource.append(obj_)
            obj_.original_tagname_ = 'ComplexSource'
        elif nodeName_ == 'AveragedSource':
            obj_ = SimpleSourceType.factory()
            obj_.build(child_)
            self.AveragedSource.append(obj_)
            obj_.original_tagname_ = 'AveragedSource'
        elif nodeName_ == 'KernelFilteredSource':
            obj_ = KernelFilteredSourceType.factory()
            obj_.build(child_)
            self.KernelFilteredSource.append(obj_)
            obj_.original_tagname_ = 'KernelFilteredSource'
        elif nodeName_ == 'PixelFunctionType':
            PixelFunctionType_ = child_.text
            PixelFunctionType_ = self.gds_validate_string(PixelFunctionType_, node, 'PixelFunctionType')
            self.PixelFunctionType.append(PixelFunctionType_)
        elif nodeName_ == 'SourceTransferType':
            SourceTransferType_ = child_.text
            SourceTransferType_ = self.gds_validate_string(SourceTransferType_, node, 'SourceTransferType')
            self.SourceTransferType.append(SourceTransferType_)
            # validate type DataTypeType
            self.validate_DataTypeType(self.SourceTransferType[-1])
        elif nodeName_ == 'PixelFunctionLanguage':
            PixelFunctionLanguage_ = child_.text
            PixelFunctionLanguage_ = self.gds_validate_string(PixelFunctionLanguage_, node, 'PixelFunctionLanguage')
            self.PixelFunctionLanguage.append(PixelFunctionLanguage_)
        elif nodeName_ == 'PixelFunctionCode':
            PixelFunctionCode_ = child_.text
            PixelFunctionCode_ = self.gds_validate_string(PixelFunctionCode_, node, 'PixelFunctionCode')
            self.PixelFunctionCode.append(PixelFunctionCode_)
        elif nodeName_ == 'PixelFunctionArguments':
            obj_ = PixelFunctionArgumentsType.factory()
            obj_.build(child_)
            self.PixelFunctionArguments.append(obj_)
            obj_.original_tagname_ = 'PixelFunctionArguments'
        elif nodeName_ == 'BufferRadius':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'BufferRadius')
            self.BufferRadius.append(ival_)
        elif nodeName_ == 'SourceFilename':
            obj_ = SourceFilenameType.factory()
            obj_.build(child_)
            self.SourceFilename.append(obj_)
            obj_.original_tagname_ = 'SourceFilename'
        elif nodeName_ == 'ImageOffset':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ImageOffset')
            self.ImageOffset.append(ival_)
        elif nodeName_ == 'PixelOffset':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'PixelOffset')
            self.PixelOffset.append(ival_)
        elif nodeName_ == 'LineOffset':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'LineOffset')
            self.LineOffset.append(ival_)
        elif nodeName_ == 'ByteOrder':
            ByteOrder_ = child_.text
            ByteOrder_ = self.gds_validate_string(ByteOrder_, node, 'ByteOrder')
            self.ByteOrder.append(ByteOrder_)
# end class VRTRasterBandType


class MaskBandType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, VRTRasterBand=None):
        self.original_tagname_ = None
        self.VRTRasterBand = VRTRasterBand
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MaskBandType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MaskBandType.subclass:
            return MaskBandType.subclass(*args_, **kwargs_)
        else:
            return MaskBandType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.VRTRasterBand is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MaskBandType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MaskBandType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MaskBandType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MaskBandType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MaskBandType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.VRTRasterBand is not None:
            self.VRTRasterBand.export(outfile, level, namespace_, name_='VRTRasterBand', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='MaskBandType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.VRTRasterBand is not None:
            showIndent(outfile, level)
            outfile.write('VRTRasterBand=model_.VRTRasterBandType(\n')
            self.VRTRasterBand.exportLiteral(outfile, level, name_='VRTRasterBand')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'VRTRasterBand':
            obj_ = VRTRasterBandType.factory()
            obj_.build(child_)
            self.VRTRasterBand = obj_
            obj_.original_tagname_ = 'VRTRasterBand'
# end class MaskBandType


class HistogramsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HistItem=None):
        self.original_tagname_ = None
        if HistItem is None:
            self.HistItem = []
        else:
            self.HistItem = HistItem
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HistogramsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HistogramsType.subclass:
            return HistogramsType.subclass(*args_, **kwargs_)
        else:
            return HistogramsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.HistItem
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='HistogramsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HistogramsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='HistogramsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='HistogramsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='HistogramsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for HistItem_ in self.HistItem:
            HistItem_.export(outfile, level, namespace_, name_='HistItem', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='HistogramsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('HistItem=[\n')
        level += 1
        for HistItem_ in self.HistItem:
            showIndent(outfile, level)
            outfile.write('model_.HistItemType(\n')
            HistItem_.exportLiteral(outfile, level, name_='HistItemType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HistItem':
            obj_ = HistItemType.factory()
            obj_.build(child_)
            self.HistItem.append(obj_)
            obj_.original_tagname_ = 'HistItem'
# end class HistogramsType


class HistItemType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HistMin=None, HistMax=None, BucketCount=None, IncludeOutOfRange=None, Approximate=None, HistCounts=None):
        self.original_tagname_ = None
        if HistMin is None:
            self.HistMin = []
        else:
            self.HistMin = HistMin
        if HistMax is None:
            self.HistMax = []
        else:
            self.HistMax = HistMax
        if BucketCount is None:
            self.BucketCount = []
        else:
            self.BucketCount = BucketCount
        if IncludeOutOfRange is None:
            self.IncludeOutOfRange = []
        else:
            self.IncludeOutOfRange = IncludeOutOfRange
        if Approximate is None:
            self.Approximate = []
        else:
            self.Approximate = Approximate
        if HistCounts is None:
            self.HistCounts = []
        else:
            self.HistCounts = HistCounts
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HistItemType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HistItemType.subclass:
            return HistItemType.subclass(*args_, **kwargs_)
        else:
            return HistItemType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_ZeroOrOne(self, value):
        # Validate type ZeroOrOne, a restriction on xs:integer.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ZeroOrOne' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.HistMin or
            self.HistMax or
            self.BucketCount or
            self.IncludeOutOfRange or
            self.Approximate or
            self.HistCounts
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='HistItemType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HistItemType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='HistItemType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='HistItemType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='HistItemType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for HistMin_ in self.HistMin:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHistMin>%s</%sHistMin>%s' % (namespace_, self.gds_format_double(HistMin_, input_name='HistMin'), namespace_, eol_))
        for HistMax_ in self.HistMax:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHistMax>%s</%sHistMax>%s' % (namespace_, self.gds_format_double(HistMax_, input_name='HistMax'), namespace_, eol_))
        for BucketCount_ in self.BucketCount:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBucketCount>%s</%sBucketCount>%s' % (namespace_, self.gds_format_integer(BucketCount_, input_name='BucketCount'), namespace_, eol_))
        for IncludeOutOfRange_ in self.IncludeOutOfRange:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIncludeOutOfRange>%s</%sIncludeOutOfRange>%s' % (namespace_, self.gds_format_integer(IncludeOutOfRange_, input_name='IncludeOutOfRange'), namespace_, eol_))
        for Approximate_ in self.Approximate:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApproximate>%s</%sApproximate>%s' % (namespace_, self.gds_format_integer(Approximate_, input_name='Approximate'), namespace_, eol_))
        for HistCounts_ in self.HistCounts:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHistCounts>%s</%sHistCounts>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(HistCounts_), input_name='HistCounts')), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='HistItemType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('HistMin=[\n')
        level += 1
        for HistMin_ in self.HistMin:
            showIndent(outfile, level)
            outfile.write('%e,\n' % HistMin_)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('HistMax=[\n')
        level += 1
        for HistMax_ in self.HistMax:
            showIndent(outfile, level)
            outfile.write('%e,\n' % HistMax_)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('BucketCount=[\n')
        level += 1
        for BucketCount_ in self.BucketCount:
            showIndent(outfile, level)
            outfile.write('%d,\n' % BucketCount_)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('IncludeOutOfRange=[\n')
        level += 1
        for IncludeOutOfRange_ in self.IncludeOutOfRange:
            showIndent(outfile, level)
            outfile.write('%d,\n' % IncludeOutOfRange_)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Approximate=[\n')
        level += 1
        for Approximate_ in self.Approximate:
            showIndent(outfile, level)
            outfile.write('%d,\n' % Approximate_)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('HistCounts=[\n')
        level += 1
        for HistCounts_ in self.HistCounts:
            showIndent(outfile, level)
            outfile.write('%s,\n' % self.gds_encode(quote_python(HistCounts_)))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HistMin':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'HistMin')
            self.HistMin.append(fval_)
        elif nodeName_ == 'HistMax':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'HistMax')
            self.HistMax.append(fval_)
        elif nodeName_ == 'BucketCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'BucketCount')
            self.BucketCount.append(ival_)
        elif nodeName_ == 'IncludeOutOfRange':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IncludeOutOfRange')
            self.IncludeOutOfRange.append(ival_)
            # validate type ZeroOrOne
            self.validate_ZeroOrOne(self.IncludeOutOfRange[-1])
        elif nodeName_ == 'Approximate':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Approximate')
            self.Approximate.append(ival_)
            # validate type ZeroOrOne
            self.validate_ZeroOrOne(self.Approximate[-1])
        elif nodeName_ == 'HistCounts':
            HistCounts_ = child_.text
            HistCounts_ = self.gds_validate_string(HistCounts_, node, 'HistCounts')
            self.HistCounts.append(HistCounts_)
# end class HistItemType


class CategoryNamesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Category=None):
        self.original_tagname_ = None
        if Category is None:
            self.Category = []
        else:
            self.Category = Category
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CategoryNamesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CategoryNamesType.subclass:
            return CategoryNamesType.subclass(*args_, **kwargs_)
        else:
            return CategoryNamesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.Category
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CategoryNamesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CategoryNamesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CategoryNamesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CategoryNamesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CategoryNamesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Category_ in self.Category:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCategory>%s</%sCategory>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(Category_), input_name='Category')), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='CategoryNamesType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Category=[\n')
        level += 1
        for Category_ in self.Category:
            showIndent(outfile, level)
            outfile.write('%s,\n' % self.gds_encode(quote_python(Category_)))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Category':
            Category_ = child_.text
            Category_ = self.gds_validate_string(Category_, node, 'Category')
            self.Category.append(Category_)
# end class CategoryNamesType


class ColorTableType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Entry=None):
        self.original_tagname_ = None
        if Entry is None:
            self.Entry = []
        else:
            self.Entry = Entry
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ColorTableType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ColorTableType.subclass:
            return ColorTableType.subclass(*args_, **kwargs_)
        else:
            return ColorTableType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.Entry
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ColorTableType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ColorTableType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ColorTableType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ColorTableType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ColorTableType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Entry_ in self.Entry:
            Entry_.export(outfile, level, namespace_, name_='Entry', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ColorTableType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Entry=[\n')
        level += 1
        for Entry_ in self.Entry:
            showIndent(outfile, level)
            outfile.write('model_.ColorTableEntryType(\n')
            Entry_.exportLiteral(outfile, level, name_='ColorTableEntryType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Entry':
            obj_ = ColorTableEntryType.factory()
            obj_.build(child_)
            self.Entry.append(obj_)
            obj_.original_tagname_ = 'Entry'
# end class ColorTableType


class OverviewType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SourceFilename=None, SourceBand=None):
        self.original_tagname_ = None
        if SourceFilename is None:
            self.SourceFilename = []
        else:
            self.SourceFilename = SourceFilename
        if SourceBand is None:
            self.SourceBand = []
        else:
            self.SourceBand = SourceBand
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OverviewType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OverviewType.subclass:
            return OverviewType.subclass(*args_, **kwargs_)
        else:
            return OverviewType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.SourceFilename or
            self.SourceBand
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OverviewType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OverviewType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OverviewType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OverviewType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OverviewType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SourceFilename_ in self.SourceFilename:
            SourceFilename_.export(outfile, level, namespace_, name_='SourceFilename', pretty_print=pretty_print)
        for SourceBand_ in self.SourceBand:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSourceBand>%s</%sSourceBand>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(SourceBand_), input_name='SourceBand')), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='OverviewType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('SourceFilename=[\n')
        level += 1
        for SourceFilename_ in self.SourceFilename:
            showIndent(outfile, level)
            outfile.write('model_.SourceFilenameType(\n')
            SourceFilename_.exportLiteral(outfile, level, name_='SourceFilenameType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SourceBand=[\n')
        level += 1
        for SourceBand_ in self.SourceBand:
            showIndent(outfile, level)
            outfile.write('%s,\n' % self.gds_encode(quote_python(SourceBand_)))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SourceFilename':
            obj_ = SourceFilenameType.factory()
            obj_.build(child_)
            self.SourceFilename.append(obj_)
            obj_.original_tagname_ = 'SourceFilename'
        elif nodeName_ == 'SourceBand':
            SourceBand_ = child_.text
            SourceBand_ = self.gds_validate_string(SourceBand_, node, 'SourceBand')
            self.SourceBand.append(SourceBand_)
# end class OverviewType


class ColorTableEntryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, c1=None, c2=None, c3=None, c4=None):
        self.original_tagname_ = None
        self.c1 = _cast(int, c1)
        self.c2 = _cast(int, c2)
        self.c3 = _cast(int, c3)
        self.c4 = _cast(int, c4)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ColorTableEntryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ColorTableEntryType.subclass:
            return ColorTableEntryType.subclass(*args_, **kwargs_)
        else:
            return ColorTableEntryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ColorTableEntryType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ColorTableEntryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ColorTableEntryType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ColorTableEntryType'):
        if self.c1 is not None and 'c1' not in already_processed:
            already_processed.add('c1')
            outfile.write(' c1="%s"' % self.gds_format_integer(self.c1, input_name='c1'))
        if self.c2 is not None and 'c2' not in already_processed:
            already_processed.add('c2')
            outfile.write(' c2="%s"' % self.gds_format_integer(self.c2, input_name='c2'))
        if self.c3 is not None and 'c3' not in already_processed:
            already_processed.add('c3')
            outfile.write(' c3="%s"' % self.gds_format_integer(self.c3, input_name='c3'))
        if self.c4 is not None and 'c4' not in already_processed:
            already_processed.add('c4')
            outfile.write(' c4="%s"' % self.gds_format_integer(self.c4, input_name='c4'))
    def exportChildren(self, outfile, level, namespace_='', name_='ColorTableEntryType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='ColorTableEntryType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.c1 is not None and 'c1' not in already_processed:
            already_processed.add('c1')
            showIndent(outfile, level)
            outfile.write('c1=%d,\n' % (self.c1,))
        if self.c2 is not None and 'c2' not in already_processed:
            already_processed.add('c2')
            showIndent(outfile, level)
            outfile.write('c2=%d,\n' % (self.c2,))
        if self.c3 is not None and 'c3' not in already_processed:
            already_processed.add('c3')
            showIndent(outfile, level)
            outfile.write('c3=%d,\n' % (self.c3,))
        if self.c4 is not None and 'c4' not in already_processed:
            already_processed.add('c4')
            showIndent(outfile, level)
            outfile.write('c4=%d,\n' % (self.c4,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('c1', node)
        if value is not None and 'c1' not in already_processed:
            already_processed.add('c1')
            try:
                self.c1 = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('c2', node)
        if value is not None and 'c2' not in already_processed:
            already_processed.add('c2')
            try:
                self.c2 = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('c3', node)
        if value is not None and 'c3' not in already_processed:
            already_processed.add('c3')
            try:
                self.c3 = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('c4', node)
        if value is not None and 'c4' not in already_processed:
            already_processed.add('c4')
            try:
                self.c4 = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ColorTableEntryType


class OpenOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OOI=None):
        self.original_tagname_ = None
        if OOI is None:
            self.OOI = []
        else:
            self.OOI = OOI
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OpenOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OpenOptionsType.subclass:
            return OpenOptionsType.subclass(*args_, **kwargs_)
        else:
            return OpenOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.OOI
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OpenOptionsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OpenOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OpenOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OpenOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OpenOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for OOI_ in self.OOI:
            OOI_.export(outfile, level, namespace_, name_='OOI', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='OpenOptionsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('OOI=[\n')
        level += 1
        for OOI_ in self.OOI:
            showIndent(outfile, level)
            outfile.write('model_.OOIType(\n')
            OOI_.exportLiteral(outfile, level, name_='OOIType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OOI':
            obj_ = OOIType.factory()
            obj_.build(child_)
            self.OOI.append(obj_)
            obj_.original_tagname_ = 'OOI'
# end class OpenOptionsType


class OOIType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, key=None, valueOf_=None):
        self.original_tagname_ = None
        self.key = _cast(None, key)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OOIType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OOIType.subclass:
            return OOIType.subclass(*args_, **kwargs_)
        else:
            return OOIType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OOIType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OOIType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write((quote_xml(self.valueOf_) if type(self.valueOf_) is str else self.gds_encode(str(self.valueOf_))))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OOIType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OOIType'):
        if self.key is not None and 'key' not in already_processed:
            already_processed.add('key')
            outfile.write(' key=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.key), input_name='key')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OOIType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='OOIType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.key is not None and 'key' not in already_processed:
            already_processed.add('key')
            showIndent(outfile, level)
            outfile.write('key="%s",\n' % (self.key,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('key', node)
        if value is not None and 'key' not in already_processed:
            already_processed.add('key')
            self.key = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OOIType


class SimpleSourceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resampling=None, SourceFilename=None, OpenOptions=None, SourceBand=None, SourceProperties=None, SrcRect=None, DstRect=None):
        self.original_tagname_ = None
        self.resampling = _cast(None, resampling)
        if SourceFilename is None:
            self.SourceFilename = []
        else:
            self.SourceFilename = SourceFilename
        if OpenOptions is None:
            self.OpenOptions = []
        else:
            self.OpenOptions = OpenOptions
        if SourceBand is None:
            self.SourceBand = []
        else:
            self.SourceBand = SourceBand
        if SourceProperties is None:
            self.SourceProperties = []
        else:
            self.SourceProperties = SourceProperties
        if SrcRect is None:
            self.SrcRect = []
        else:
            self.SrcRect = SrcRect
        if DstRect is None:
            self.DstRect = []
        else:
            self.DstRect = DstRect
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SimpleSourceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SimpleSourceType.subclass:
            return SimpleSourceType.subclass(*args_, **kwargs_)
        else:
            return SimpleSourceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.SourceFilename or
            self.OpenOptions or
            self.SourceBand or
            self.SourceProperties or
            self.SrcRect or
            self.DstRect
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SimpleSourceType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SimpleSourceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SimpleSourceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SimpleSourceType'):
        if self.resampling is not None and 'resampling' not in already_processed:
            already_processed.add('resampling')
            outfile.write(' resampling=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.resampling), input_name='resampling')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SimpleSourceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SourceFilename_ in self.SourceFilename:
            SourceFilename_.export(outfile, level, namespace_, name_='SourceFilename', pretty_print=pretty_print)
        for OpenOptions_ in self.OpenOptions:
            OpenOptions_.export(outfile, level, namespace_, name_='OpenOptions', pretty_print=pretty_print)
        for SourceBand_ in self.SourceBand:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSourceBand>%s</%sSourceBand>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(SourceBand_), input_name='SourceBand')), namespace_, eol_))
        for SourceProperties_ in self.SourceProperties:
            SourceProperties_.export(outfile, level, namespace_, name_='SourceProperties', pretty_print=pretty_print)
        for SrcRect_ in self.SrcRect:
            SrcRect_.export(outfile, level, namespace_, name_='SrcRect', pretty_print=pretty_print)
        for DstRect_ in self.DstRect:
            DstRect_.export(outfile, level, namespace_, name_='DstRect', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='SimpleSourceType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.resampling is not None and 'resampling' not in already_processed:
            already_processed.add('resampling')
            showIndent(outfile, level)
            outfile.write('resampling="%s",\n' % (self.resampling,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('SourceFilename=[\n')
        level += 1
        for SourceFilename_ in self.SourceFilename:
            showIndent(outfile, level)
            outfile.write('model_.SourceFilenameType(\n')
            SourceFilename_.exportLiteral(outfile, level, name_='SourceFilenameType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('OpenOptions=[\n')
        level += 1
        for OpenOptions_ in self.OpenOptions:
            showIndent(outfile, level)
            outfile.write('model_.OpenOptionsType(\n')
            OpenOptions_.exportLiteral(outfile, level, name_='OpenOptionsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SourceBand=[\n')
        level += 1
        for SourceBand_ in self.SourceBand:
            showIndent(outfile, level)
            outfile.write('%s,\n' % self.gds_encode(quote_python(SourceBand_)))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SourceProperties=[\n')
        level += 1
        for SourceProperties_ in self.SourceProperties:
            showIndent(outfile, level)
            outfile.write('model_.SourcePropertiesType(\n')
            SourceProperties_.exportLiteral(outfile, level, name_='SourcePropertiesType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SrcRect=[\n')
        level += 1
        for SrcRect_ in self.SrcRect:
            showIndent(outfile, level)
            outfile.write('model_.RectType(\n')
            SrcRect_.exportLiteral(outfile, level, name_='RectType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('DstRect=[\n')
        level += 1
        for DstRect_ in self.DstRect:
            showIndent(outfile, level)
            outfile.write('model_.RectType(\n')
            DstRect_.exportLiteral(outfile, level, name_='RectType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('resampling', node)
        if value is not None and 'resampling' not in already_processed:
            already_processed.add('resampling')
            self.resampling = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SourceFilename':
            obj_ = SourceFilenameType.factory()
            obj_.build(child_)
            self.SourceFilename.append(obj_)
            obj_.original_tagname_ = 'SourceFilename'
        elif nodeName_ == 'OpenOptions':
            obj_ = OpenOptionsType.factory()
            obj_.build(child_)
            self.OpenOptions.append(obj_)
            obj_.original_tagname_ = 'OpenOptions'
        elif nodeName_ == 'SourceBand':
            SourceBand_ = child_.text
            SourceBand_ = self.gds_validate_string(SourceBand_, node, 'SourceBand')
            self.SourceBand.append(SourceBand_)
        elif nodeName_ == 'SourceProperties':
            obj_ = SourcePropertiesType.factory()
            obj_.build(child_)
            self.SourceProperties.append(obj_)
            obj_.original_tagname_ = 'SourceProperties'
        elif nodeName_ == 'SrcRect':
            obj_ = RectType.factory()
            obj_.build(child_)
            self.SrcRect.append(obj_)
            obj_.original_tagname_ = 'SrcRect'
        elif nodeName_ == 'DstRect':
            obj_ = RectType.factory()
            obj_.build(child_)
            self.DstRect.append(obj_)
            obj_.original_tagname_ = 'DstRect'
# end class SimpleSourceType


class ComplexSourceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resampling=None, SourceFilename=None, OpenOptions=None, SourceBand=None, SourceProperties=None, SrcRect=None, DstRect=None, ScaleOffset=None, ScaleRatio=None, ColorTableComponent=None, Exponent=None, SrcMin=None, SrcMax=None, DstMin=None, DstMax=None, NODATA=None, LUT=None):
        self.original_tagname_ = None
        self.resampling = _cast(None, resampling)
        if SourceFilename is None:
            self.SourceFilename = []
        else:
            self.SourceFilename = SourceFilename
        if OpenOptions is None:
            self.OpenOptions = []
        else:
            self.OpenOptions = OpenOptions
        if SourceBand is None:
            self.SourceBand = []
        else:
            self.SourceBand = SourceBand
        if SourceProperties is None:
            self.SourceProperties = []
        else:
            self.SourceProperties = SourceProperties
        if SrcRect is None:
            self.SrcRect = []
        else:
            self.SrcRect = SrcRect
        if DstRect is None:
            self.DstRect = []
        else:
            self.DstRect = DstRect
        self.ScaleOffset = ScaleOffset
        self.ScaleRatio = ScaleRatio
        self.ColorTableComponent = ColorTableComponent
        self.Exponent = Exponent
        self.SrcMin = SrcMin
        self.SrcMax = SrcMax
        self.DstMin = DstMin
        self.DstMax = DstMax
        self.NODATA = NODATA
        self.validate_DoubleOrNanType(self.NODATA)
        self.LUT = LUT
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ComplexSourceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ComplexSourceType.subclass:
            return ComplexSourceType.subclass(*args_, **kwargs_)
        else:
            return ComplexSourceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_DoubleOrNanType(self, value):
        # Validate type DoubleOrNanType, a restriction on None.
        pass
    def hasContent_(self):
        if (
            self.SourceFilename or
            self.OpenOptions or
            self.SourceBand or
            self.SourceProperties or
            self.SrcRect or
            self.DstRect or
            self.ScaleOffset is not None or
            self.ScaleRatio is not None or
            self.ColorTableComponent is not None or
            self.Exponent is not None or
            self.SrcMin is not None or
            self.SrcMax is not None or
            self.DstMin is not None or
            self.DstMax is not None or
            self.NODATA is not None or
            self.LUT is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ComplexSourceType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ComplexSourceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ComplexSourceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ComplexSourceType'):
        if self.resampling is not None and 'resampling' not in already_processed:
            already_processed.add('resampling')
            outfile.write(' resampling=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.resampling), input_name='resampling')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ComplexSourceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SourceFilename_ in self.SourceFilename:
            SourceFilename_.export(outfile, level, namespace_, name_='SourceFilename', pretty_print=pretty_print)
        for OpenOptions_ in self.OpenOptions:
            OpenOptions_.export(outfile, level, namespace_, name_='OpenOptions', pretty_print=pretty_print)
        for SourceBand_ in self.SourceBand:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSourceBand>%s</%sSourceBand>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(SourceBand_), input_name='SourceBand')), namespace_, eol_))
        for SourceProperties_ in self.SourceProperties:
            SourceProperties_.export(outfile, level, namespace_, name_='SourceProperties', pretty_print=pretty_print)
        for SrcRect_ in self.SrcRect:
            SrcRect_.export(outfile, level, namespace_, name_='SrcRect', pretty_print=pretty_print)
        for DstRect_ in self.DstRect:
            DstRect_.export(outfile, level, namespace_, name_='DstRect', pretty_print=pretty_print)
        if self.ScaleOffset is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sScaleOffset>%s</%sScaleOffset>%s' % (namespace_, self.gds_format_double(self.ScaleOffset, input_name='ScaleOffset'), namespace_, eol_))
        if self.ScaleRatio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sScaleRatio>%s</%sScaleRatio>%s' % (namespace_, self.gds_format_double(self.ScaleRatio, input_name='ScaleRatio'), namespace_, eol_))
        if self.ColorTableComponent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sColorTableComponent>%s</%sColorTableComponent>%s' % (namespace_, self.gds_format_integer(self.ColorTableComponent, input_name='ColorTableComponent'), namespace_, eol_))
        if self.Exponent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExponent>%s</%sExponent>%s' % (namespace_, self.gds_format_double(self.Exponent, input_name='Exponent'), namespace_, eol_))
        if self.SrcMin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSrcMin>%s</%sSrcMin>%s' % (namespace_, self.gds_format_double(self.SrcMin, input_name='SrcMin'), namespace_, eol_))
        if self.SrcMax is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSrcMax>%s</%sSrcMax>%s' % (namespace_, self.gds_format_double(self.SrcMax, input_name='SrcMax'), namespace_, eol_))
        if self.DstMin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDstMin>%s</%sDstMin>%s' % (namespace_, self.gds_format_double(self.DstMin, input_name='DstMin'), namespace_, eol_))
        if self.DstMax is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDstMax>%s</%sDstMax>%s' % (namespace_, self.gds_format_double(self.DstMax, input_name='DstMax'), namespace_, eol_))
        if self.NODATA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNODATA>%s</%sNODATA>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NODATA), input_name='NODATA')), namespace_, eol_))
        if self.LUT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLUT>%s</%sLUT>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LUT), input_name='LUT')), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ComplexSourceType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.resampling is not None and 'resampling' not in already_processed:
            already_processed.add('resampling')
            showIndent(outfile, level)
            outfile.write('resampling="%s",\n' % (self.resampling,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('SourceFilename=[\n')
        level += 1
        for SourceFilename_ in self.SourceFilename:
            showIndent(outfile, level)
            outfile.write('model_.SourceFilenameType(\n')
            SourceFilename_.exportLiteral(outfile, level, name_='SourceFilenameType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('OpenOptions=[\n')
        level += 1
        for OpenOptions_ in self.OpenOptions:
            showIndent(outfile, level)
            outfile.write('model_.OpenOptionsType(\n')
            OpenOptions_.exportLiteral(outfile, level, name_='OpenOptionsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SourceBand=[\n')
        level += 1
        for SourceBand_ in self.SourceBand:
            showIndent(outfile, level)
            outfile.write('%s,\n' % self.gds_encode(quote_python(SourceBand_)))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SourceProperties=[\n')
        level += 1
        for SourceProperties_ in self.SourceProperties:
            showIndent(outfile, level)
            outfile.write('model_.SourcePropertiesType(\n')
            SourceProperties_.exportLiteral(outfile, level, name_='SourcePropertiesType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SrcRect=[\n')
        level += 1
        for SrcRect_ in self.SrcRect:
            showIndent(outfile, level)
            outfile.write('model_.RectType(\n')
            SrcRect_.exportLiteral(outfile, level, name_='RectType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('DstRect=[\n')
        level += 1
        for DstRect_ in self.DstRect:
            showIndent(outfile, level)
            outfile.write('model_.RectType(\n')
            DstRect_.exportLiteral(outfile, level, name_='RectType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.ScaleOffset is not None:
            showIndent(outfile, level)
            outfile.write('ScaleOffset=%e,\n' % self.ScaleOffset)
        if self.ScaleRatio is not None:
            showIndent(outfile, level)
            outfile.write('ScaleRatio=%e,\n' % self.ScaleRatio)
        if self.ColorTableComponent is not None:
            showIndent(outfile, level)
            outfile.write('ColorTableComponent=%d,\n' % self.ColorTableComponent)
        if self.Exponent is not None:
            showIndent(outfile, level)
            outfile.write('Exponent=%e,\n' % self.Exponent)
        if self.SrcMin is not None:
            showIndent(outfile, level)
            outfile.write('SrcMin=%e,\n' % self.SrcMin)
        if self.SrcMax is not None:
            showIndent(outfile, level)
            outfile.write('SrcMax=%e,\n' % self.SrcMax)
        if self.DstMin is not None:
            showIndent(outfile, level)
            outfile.write('DstMin=%e,\n' % self.DstMin)
        if self.DstMax is not None:
            showIndent(outfile, level)
            outfile.write('DstMax=%e,\n' % self.DstMax)
        if self.NODATA is not None:
            showIndent(outfile, level)
            outfile.write('NODATA=%s,\n' % self.gds_encode(quote_python(self.NODATA)))
        if self.LUT is not None:
            showIndent(outfile, level)
            outfile.write('LUT=%s,\n' % self.gds_encode(quote_python(self.LUT)))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('resampling', node)
        if value is not None and 'resampling' not in already_processed:
            already_processed.add('resampling')
            self.resampling = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SourceFilename':
            obj_ = SourceFilenameType.factory()
            obj_.build(child_)
            self.SourceFilename.append(obj_)
            obj_.original_tagname_ = 'SourceFilename'
        elif nodeName_ == 'OpenOptions':
            obj_ = OpenOptionsType.factory()
            obj_.build(child_)
            self.OpenOptions.append(obj_)
            obj_.original_tagname_ = 'OpenOptions'
        elif nodeName_ == 'SourceBand':
            SourceBand_ = child_.text
            SourceBand_ = self.gds_validate_string(SourceBand_, node, 'SourceBand')
            self.SourceBand.append(SourceBand_)
        elif nodeName_ == 'SourceProperties':
            obj_ = SourcePropertiesType.factory()
            obj_.build(child_)
            self.SourceProperties.append(obj_)
            obj_.original_tagname_ = 'SourceProperties'
        elif nodeName_ == 'SrcRect':
            obj_ = RectType.factory()
            obj_.build(child_)
            self.SrcRect.append(obj_)
            obj_.original_tagname_ = 'SrcRect'
        elif nodeName_ == 'DstRect':
            obj_ = RectType.factory()
            obj_.build(child_)
            self.DstRect.append(obj_)
            obj_.original_tagname_ = 'DstRect'
        elif nodeName_ == 'ScaleOffset':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ScaleOffset')
            self.ScaleOffset = fval_
        elif nodeName_ == 'ScaleRatio':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ScaleRatio')
            self.ScaleRatio = fval_
        elif nodeName_ == 'ColorTableComponent':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'ColorTableComponent')
            self.ColorTableComponent = ival_
        elif nodeName_ == 'Exponent':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Exponent')
            self.Exponent = fval_
        elif nodeName_ == 'SrcMin':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SrcMin')
            self.SrcMin = fval_
        elif nodeName_ == 'SrcMax':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SrcMax')
            self.SrcMax = fval_
        elif nodeName_ == 'DstMin':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DstMin')
            self.DstMin = fval_
        elif nodeName_ == 'DstMax':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DstMax')
            self.DstMax = fval_
        elif nodeName_ == 'NODATA':
            NODATA_ = child_.text
            NODATA_ = self.gds_validate_string(NODATA_, node, 'NODATA')
            self.NODATA = NODATA_
            # validate type DoubleOrNanType
            self.validate_DoubleOrNanType(self.NODATA)
        elif nodeName_ == 'LUT':
            LUT_ = child_.text
            LUT_ = self.gds_validate_string(LUT_, node, 'LUT')
            self.LUT = LUT_
# end class ComplexSourceType


class KernelFilteredSourceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resampling=None, SourceFilename=None, OpenOptions=None, SourceBand=None, SourceProperties=None, SrcRect=None, DstRect=None, ScaleOffset=None, ScaleRatio=None, ColorTableComponent=None, Exponent=None, SrcMin=None, SrcMax=None, DstMin=None, DstMax=None, NODATA=None, LUT=None, Kernel=None):
        self.original_tagname_ = None
        self.resampling = _cast(None, resampling)
        if SourceFilename is None:
            self.SourceFilename = []
        else:
            self.SourceFilename = SourceFilename
        if OpenOptions is None:
            self.OpenOptions = []
        else:
            self.OpenOptions = OpenOptions
        if SourceBand is None:
            self.SourceBand = []
        else:
            self.SourceBand = SourceBand
        if SourceProperties is None:
            self.SourceProperties = []
        else:
            self.SourceProperties = SourceProperties
        if SrcRect is None:
            self.SrcRect = []
        else:
            self.SrcRect = SrcRect
        if DstRect is None:
            self.DstRect = []
        else:
            self.DstRect = DstRect
        self.ScaleOffset = ScaleOffset
        self.ScaleRatio = ScaleRatio
        self.ColorTableComponent = ColorTableComponent
        self.Exponent = Exponent
        self.SrcMin = SrcMin
        self.SrcMax = SrcMax
        self.DstMin = DstMin
        self.DstMax = DstMax
        self.NODATA = NODATA
        self.validate_DoubleOrNanType(self.NODATA)
        self.LUT = LUT
        self.Kernel = Kernel
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, KernelFilteredSourceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if KernelFilteredSourceType.subclass:
            return KernelFilteredSourceType.subclass(*args_, **kwargs_)
        else:
            return KernelFilteredSourceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_DoubleOrNanType(self, value):
        # Validate type DoubleOrNanType, a restriction on None.
        pass
    def hasContent_(self):
        if (
            self.SourceFilename or
            self.OpenOptions or
            self.SourceBand or
            self.SourceProperties or
            self.SrcRect or
            self.DstRect or
            self.ScaleOffset is not None or
            self.ScaleRatio is not None or
            self.ColorTableComponent is not None or
            self.Exponent is not None or
            self.SrcMin is not None or
            self.SrcMax is not None or
            self.DstMin is not None or
            self.DstMax is not None or
            self.NODATA is not None or
            self.LUT is not None or
            self.Kernel is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='KernelFilteredSourceType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='KernelFilteredSourceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='KernelFilteredSourceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='KernelFilteredSourceType'):
        if self.resampling is not None and 'resampling' not in already_processed:
            already_processed.add('resampling')
            outfile.write(' resampling=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.resampling), input_name='resampling')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='KernelFilteredSourceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SourceFilename_ in self.SourceFilename:
            SourceFilename_.export(outfile, level, namespace_, name_='SourceFilename', pretty_print=pretty_print)
        for OpenOptions_ in self.OpenOptions:
            OpenOptions_.export(outfile, level, namespace_, name_='OpenOptions', pretty_print=pretty_print)
        for SourceBand_ in self.SourceBand:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSourceBand>%s</%sSourceBand>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(SourceBand_), input_name='SourceBand')), namespace_, eol_))
        for SourceProperties_ in self.SourceProperties:
            SourceProperties_.export(outfile, level, namespace_, name_='SourceProperties', pretty_print=pretty_print)
        for SrcRect_ in self.SrcRect:
            SrcRect_.export(outfile, level, namespace_, name_='SrcRect', pretty_print=pretty_print)
        for DstRect_ in self.DstRect:
            DstRect_.export(outfile, level, namespace_, name_='DstRect', pretty_print=pretty_print)
        if self.ScaleOffset is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sScaleOffset>%s</%sScaleOffset>%s' % (namespace_, self.gds_format_double(self.ScaleOffset, input_name='ScaleOffset'), namespace_, eol_))
        if self.ScaleRatio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sScaleRatio>%s</%sScaleRatio>%s' % (namespace_, self.gds_format_double(self.ScaleRatio, input_name='ScaleRatio'), namespace_, eol_))
        if self.ColorTableComponent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sColorTableComponent>%s</%sColorTableComponent>%s' % (namespace_, self.gds_format_integer(self.ColorTableComponent, input_name='ColorTableComponent'), namespace_, eol_))
        if self.Exponent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExponent>%s</%sExponent>%s' % (namespace_, self.gds_format_double(self.Exponent, input_name='Exponent'), namespace_, eol_))
        if self.SrcMin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSrcMin>%s</%sSrcMin>%s' % (namespace_, self.gds_format_double(self.SrcMin, input_name='SrcMin'), namespace_, eol_))
        if self.SrcMax is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSrcMax>%s</%sSrcMax>%s' % (namespace_, self.gds_format_double(self.SrcMax, input_name='SrcMax'), namespace_, eol_))
        if self.DstMin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDstMin>%s</%sDstMin>%s' % (namespace_, self.gds_format_double(self.DstMin, input_name='DstMin'), namespace_, eol_))
        if self.DstMax is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDstMax>%s</%sDstMax>%s' % (namespace_, self.gds_format_double(self.DstMax, input_name='DstMax'), namespace_, eol_))
        if self.NODATA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNODATA>%s</%sNODATA>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NODATA), input_name='NODATA')), namespace_, eol_))
        if self.LUT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLUT>%s</%sLUT>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LUT), input_name='LUT')), namespace_, eol_))
        if self.Kernel is not None:
            self.Kernel.export(outfile, level, namespace_, name_='Kernel', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='KernelFilteredSourceType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.resampling is not None and 'resampling' not in already_processed:
            already_processed.add('resampling')
            showIndent(outfile, level)
            outfile.write('resampling="%s",\n' % (self.resampling,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('SourceFilename=[\n')
        level += 1
        for SourceFilename_ in self.SourceFilename:
            showIndent(outfile, level)
            outfile.write('model_.SourceFilenameType(\n')
            SourceFilename_.exportLiteral(outfile, level, name_='SourceFilenameType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('OpenOptions=[\n')
        level += 1
        for OpenOptions_ in self.OpenOptions:
            showIndent(outfile, level)
            outfile.write('model_.OpenOptionsType(\n')
            OpenOptions_.exportLiteral(outfile, level, name_='OpenOptionsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SourceBand=[\n')
        level += 1
        for SourceBand_ in self.SourceBand:
            showIndent(outfile, level)
            outfile.write('%s,\n' % self.gds_encode(quote_python(SourceBand_)))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SourceProperties=[\n')
        level += 1
        for SourceProperties_ in self.SourceProperties:
            showIndent(outfile, level)
            outfile.write('model_.SourcePropertiesType(\n')
            SourceProperties_.exportLiteral(outfile, level, name_='SourcePropertiesType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SrcRect=[\n')
        level += 1
        for SrcRect_ in self.SrcRect:
            showIndent(outfile, level)
            outfile.write('model_.RectType(\n')
            SrcRect_.exportLiteral(outfile, level, name_='RectType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('DstRect=[\n')
        level += 1
        for DstRect_ in self.DstRect:
            showIndent(outfile, level)
            outfile.write('model_.RectType(\n')
            DstRect_.exportLiteral(outfile, level, name_='RectType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.ScaleOffset is not None:
            showIndent(outfile, level)
            outfile.write('ScaleOffset=%e,\n' % self.ScaleOffset)
        if self.ScaleRatio is not None:
            showIndent(outfile, level)
            outfile.write('ScaleRatio=%e,\n' % self.ScaleRatio)
        if self.ColorTableComponent is not None:
            showIndent(outfile, level)
            outfile.write('ColorTableComponent=%d,\n' % self.ColorTableComponent)
        if self.Exponent is not None:
            showIndent(outfile, level)
            outfile.write('Exponent=%e,\n' % self.Exponent)
        if self.SrcMin is not None:
            showIndent(outfile, level)
            outfile.write('SrcMin=%e,\n' % self.SrcMin)
        if self.SrcMax is not None:
            showIndent(outfile, level)
            outfile.write('SrcMax=%e,\n' % self.SrcMax)
        if self.DstMin is not None:
            showIndent(outfile, level)
            outfile.write('DstMin=%e,\n' % self.DstMin)
        if self.DstMax is not None:
            showIndent(outfile, level)
            outfile.write('DstMax=%e,\n' % self.DstMax)
        if self.NODATA is not None:
            showIndent(outfile, level)
            outfile.write('NODATA=%s,\n' % self.gds_encode(quote_python(self.NODATA)))
        if self.LUT is not None:
            showIndent(outfile, level)
            outfile.write('LUT=%s,\n' % self.gds_encode(quote_python(self.LUT)))
        if self.Kernel is not None:
            showIndent(outfile, level)
            outfile.write('Kernel=model_.KernelType(\n')
            self.Kernel.exportLiteral(outfile, level, name_='Kernel')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('resampling', node)
        if value is not None and 'resampling' not in already_processed:
            already_processed.add('resampling')
            self.resampling = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SourceFilename':
            obj_ = SourceFilenameType.factory()
            obj_.build(child_)
            self.SourceFilename.append(obj_)
            obj_.original_tagname_ = 'SourceFilename'
        elif nodeName_ == 'OpenOptions':
            obj_ = OpenOptionsType.factory()
            obj_.build(child_)
            self.OpenOptions.append(obj_)
            obj_.original_tagname_ = 'OpenOptions'
        elif nodeName_ == 'SourceBand':
            SourceBand_ = child_.text
            SourceBand_ = self.gds_validate_string(SourceBand_, node, 'SourceBand')
            self.SourceBand.append(SourceBand_)
        elif nodeName_ == 'SourceProperties':
            obj_ = SourcePropertiesType.factory()
            obj_.build(child_)
            self.SourceProperties.append(obj_)
            obj_.original_tagname_ = 'SourceProperties'
        elif nodeName_ == 'SrcRect':
            obj_ = RectType.factory()
            obj_.build(child_)
            self.SrcRect.append(obj_)
            obj_.original_tagname_ = 'SrcRect'
        elif nodeName_ == 'DstRect':
            obj_ = RectType.factory()
            obj_.build(child_)
            self.DstRect.append(obj_)
            obj_.original_tagname_ = 'DstRect'
        elif nodeName_ == 'ScaleOffset':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ScaleOffset')
            self.ScaleOffset = fval_
        elif nodeName_ == 'ScaleRatio':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ScaleRatio')
            self.ScaleRatio = fval_
        elif nodeName_ == 'ColorTableComponent':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'ColorTableComponent')
            self.ColorTableComponent = ival_
        elif nodeName_ == 'Exponent':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Exponent')
            self.Exponent = fval_
        elif nodeName_ == 'SrcMin':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SrcMin')
            self.SrcMin = fval_
        elif nodeName_ == 'SrcMax':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SrcMax')
            self.SrcMax = fval_
        elif nodeName_ == 'DstMin':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DstMin')
            self.DstMin = fval_
        elif nodeName_ == 'DstMax':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DstMax')
            self.DstMax = fval_
        elif nodeName_ == 'NODATA':
            NODATA_ = child_.text
            NODATA_ = self.gds_validate_string(NODATA_, node, 'NODATA')
            self.NODATA = NODATA_
            # validate type DoubleOrNanType
            self.validate_DoubleOrNanType(self.NODATA)
        elif nodeName_ == 'LUT':
            LUT_ = child_.text
            LUT_ = self.gds_validate_string(LUT_, node, 'LUT')
            self.LUT = LUT_
        elif nodeName_ == 'Kernel':
            obj_ = KernelType.factory()
            obj_.build(child_)
            self.Kernel = obj_
            obj_.original_tagname_ = 'Kernel'
# end class KernelFilteredSourceType


class KernelType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, normalized=None, Size=None, Coefs=None):
        self.original_tagname_ = None
        self.normalized = _cast(None, normalized)
        self.Size = Size
        self.Coefs = Coefs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, KernelType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if KernelType.subclass:
            return KernelType.subclass(*args_, **kwargs_)
        else:
            return KernelType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_ZeroOrOne(self, value):
        # Validate type ZeroOrOne, a restriction on xs:integer.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ZeroOrOne' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Size is not None or
            self.Coefs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='KernelType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='KernelType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='KernelType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='KernelType'):
        if self.normalized is not None and 'normalized' not in already_processed:
            already_processed.add('normalized')
            outfile.write(' normalized=%s' % (quote_attrib(self.normalized), ))
    def exportChildren(self, outfile, level, namespace_='', name_='KernelType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Size is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSize>%s</%sSize>%s' % (namespace_, self.gds_format_integer(self.Size, input_name='Size'), namespace_, eol_))
        if self.Coefs is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCoefs>%s</%sCoefs>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Coefs), input_name='Coefs')), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='KernelType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.normalized is not None and 'normalized' not in already_processed:
            already_processed.add('normalized')
            showIndent(outfile, level)
            outfile.write('normalized=%d,\n' % (self.normalized,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Size is not None:
            showIndent(outfile, level)
            outfile.write('Size=%d,\n' % self.Size)
        if self.Coefs is not None:
            showIndent(outfile, level)
            outfile.write('Coefs=%s,\n' % self.gds_encode(quote_python(self.Coefs)))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('normalized', node)
        if value is not None and 'normalized' not in already_processed:
            already_processed.add('normalized')
            try:
                self.normalized = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_ZeroOrOne(self.normalized)    # validate type ZeroOrOne
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Size':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Size')
            self.Size = ival_
        elif nodeName_ == 'Coefs':
            Coefs_ = child_.text
            Coefs_ = self.gds_validate_string(Coefs_, node, 'Coefs')
            self.Coefs = Coefs_
# end class KernelType


class SourceFilenameType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, relativeToVRT=None, relativetoVRT=None, shared=None, valueOf_=None):
        self.original_tagname_ = None
        self.relativeToVRT = _cast(None, relativeToVRT)
        self.relativetoVRT = _cast(None, relativetoVRT)
        self.shared = _cast(None, shared)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SourceFilenameType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SourceFilenameType.subclass:
            return SourceFilenameType.subclass(*args_, **kwargs_)
        else:
            return SourceFilenameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_ZeroOrOne(self, value):
        # Validate type ZeroOrOne, a restriction on xs:integer.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ZeroOrOne' % {"value" : value.encode("utf-8")} )
    def validate_OGRBooleanType(self, value):
        # Validate type OGRBooleanType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '0', 'ON', 'OFF', 'on', 'off', 'YES', 'NO', 'yes', 'no', 'TRUE', 'FALSE', 'true', 'false', 'True', 'False']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on OGRBooleanType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SourceFilenameType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SourceFilenameType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write((quote_xml(self.valueOf_) if type(self.valueOf_) is str else self.gds_encode(str(self.valueOf_))))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SourceFilenameType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SourceFilenameType'):
        if self.relativeToVRT is not None and 'relativeToVRT' not in already_processed:
            already_processed.add('relativeToVRT')
            outfile.write(' relativeToVRT=%s' % (quote_attrib(self.relativeToVRT), ))
        if self.relativetoVRT is not None and 'relativetoVRT' not in already_processed:
            already_processed.add('relativetoVRT')
            outfile.write(' relativetoVRT=%s' % (quote_attrib(self.relativetoVRT), ))
        if self.shared is not None and 'shared' not in already_processed:
            already_processed.add('shared')
            outfile.write(' shared=%s' % (quote_attrib(self.shared), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SourceFilenameType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='SourceFilenameType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.relativeToVRT is not None and 'relativeToVRT' not in already_processed:
            already_processed.add('relativeToVRT')
            showIndent(outfile, level)
            outfile.write('relativeToVRT=%d,\n' % (self.relativeToVRT,))
        if self.relativetoVRT is not None and 'relativetoVRT' not in already_processed:
            already_processed.add('relativetoVRT')
            showIndent(outfile, level)
            outfile.write('relativetoVRT=%d,\n' % (self.relativetoVRT,))
        if self.shared is not None and 'shared' not in already_processed:
            already_processed.add('shared')
            showIndent(outfile, level)
            outfile.write('shared="%s",\n' % (self.shared,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('relativeToVRT', node)
        if value is not None and 'relativeToVRT' not in already_processed:
            already_processed.add('relativeToVRT')
            try:
                self.relativeToVRT = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_ZeroOrOne(self.relativeToVRT)    # validate type ZeroOrOne
        value = find_attr_value_('relativetoVRT', node)
        if value is not None and 'relativetoVRT' not in already_processed:
            already_processed.add('relativetoVRT')
            try:
                self.relativetoVRT = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_ZeroOrOne(self.relativetoVRT)    # validate type ZeroOrOne
        value = find_attr_value_('shared', node)
        if value is not None and 'shared' not in already_processed:
            already_processed.add('shared')
            self.shared = value
            self.validate_OGRBooleanType(self.shared)    # validate type OGRBooleanType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SourceFilenameType


class SourcePropertiesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RasterXSize=None, RasterYSize=None, DataType=None, BlockXSize=None, BlockYSize=None):
        self.original_tagname_ = None
        self.RasterXSize = _cast(None, RasterXSize)
        self.RasterYSize = _cast(None, RasterYSize)
        self.DataType = _cast(None, DataType)
        self.BlockXSize = _cast(None, BlockXSize)
        self.BlockYSize = _cast(None, BlockYSize)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SourcePropertiesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SourcePropertiesType.subclass:
            return SourcePropertiesType.subclass(*args_, **kwargs_)
        else:
            return SourcePropertiesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_nonNegativeInteger32(self, value):
        # Validate type nonNegativeInteger32, a restriction on xs:nonNegativeInteger.
        if value is not None and Validate_simpletypes_:
            if value > 2147483647:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on nonNegativeInteger32' % {"value" : value} )
    def validate_DataTypeType(self, value):
        # Validate type DataTypeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Byte', 'UInt16', 'Int16', 'UInt32', 'Int32', 'Float32', 'Float64', 'CInt16', 'CInt32', 'CFloat32', 'CFloat64']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DataTypeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SourcePropertiesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SourcePropertiesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SourcePropertiesType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SourcePropertiesType'):
        if self.RasterXSize is not None and 'RasterXSize' not in already_processed:
            already_processed.add('RasterXSize')
            outfile.write(' RasterXSize=%s' % (quote_attrib(self.RasterXSize), ))
        if self.RasterYSize is not None and 'RasterYSize' not in already_processed:
            already_processed.add('RasterYSize')
            outfile.write(' RasterYSize=%s' % (quote_attrib(self.RasterYSize), ))
        if self.DataType is not None and 'DataType' not in already_processed:
            already_processed.add('DataType')
            outfile.write(' DataType=%s' % (quote_attrib(self.DataType), ))
        if self.BlockXSize is not None and 'BlockXSize' not in already_processed:
            already_processed.add('BlockXSize')
            outfile.write(' BlockXSize=%s' % (quote_attrib(self.BlockXSize), ))
        if self.BlockYSize is not None and 'BlockYSize' not in already_processed:
            already_processed.add('BlockYSize')
            outfile.write(' BlockYSize=%s' % (quote_attrib(self.BlockYSize), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SourcePropertiesType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='SourcePropertiesType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.RasterXSize is not None and 'RasterXSize' not in already_processed:
            already_processed.add('RasterXSize')
            showIndent(outfile, level)
            outfile.write('RasterXSize=%d,\n' % (self.RasterXSize,))
        if self.RasterYSize is not None and 'RasterYSize' not in already_processed:
            already_processed.add('RasterYSize')
            showIndent(outfile, level)
            outfile.write('RasterYSize=%d,\n' % (self.RasterYSize,))
        if self.DataType is not None and 'DataType' not in already_processed:
            already_processed.add('DataType')
            showIndent(outfile, level)
            outfile.write('DataType="%s",\n' % (self.DataType,))
        if self.BlockXSize is not None and 'BlockXSize' not in already_processed:
            already_processed.add('BlockXSize')
            showIndent(outfile, level)
            outfile.write('BlockXSize=%d,\n' % (self.BlockXSize,))
        if self.BlockYSize is not None and 'BlockYSize' not in already_processed:
            already_processed.add('BlockYSize')
            showIndent(outfile, level)
            outfile.write('BlockYSize=%d,\n' % (self.BlockYSize,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('RasterXSize', node)
        if value is not None and 'RasterXSize' not in already_processed:
            already_processed.add('RasterXSize')
            try:
                self.RasterXSize = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.RasterXSize < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
            self.validate_nonNegativeInteger32(self.RasterXSize)    # validate type nonNegativeInteger32
        value = find_attr_value_('RasterYSize', node)
        if value is not None and 'RasterYSize' not in already_processed:
            already_processed.add('RasterYSize')
            try:
                self.RasterYSize = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.RasterYSize < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
            self.validate_nonNegativeInteger32(self.RasterYSize)    # validate type nonNegativeInteger32
        value = find_attr_value_('DataType', node)
        if value is not None and 'DataType' not in already_processed:
            already_processed.add('DataType')
            self.DataType = value
            self.validate_DataTypeType(self.DataType)    # validate type DataTypeType
        value = find_attr_value_('BlockXSize', node)
        if value is not None and 'BlockXSize' not in already_processed:
            already_processed.add('BlockXSize')
            try:
                self.BlockXSize = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.BlockXSize < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
            self.validate_nonNegativeInteger32(self.BlockXSize)    # validate type nonNegativeInteger32
        value = find_attr_value_('BlockYSize', node)
        if value is not None and 'BlockYSize' not in already_processed:
            already_processed.add('BlockYSize')
            try:
                self.BlockYSize = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.BlockYSize < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
            self.validate_nonNegativeInteger32(self.BlockYSize)    # validate type nonNegativeInteger32
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SourcePropertiesType


class RectType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, xOff=None, yOff=None, xSize=None, ySize=None):
        self.original_tagname_ = None
        self.xOff = _cast(float, xOff)
        self.yOff = _cast(float, yOff)
        self.xSize = _cast(None, xSize)
        self.ySize = _cast(None, ySize)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RectType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RectType.subclass:
            return RectType.subclass(*args_, **kwargs_)
        else:
            return RectType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_nonNegativeDouble(self, value):
        # Validate type nonNegativeDouble, a restriction on xs:double.
        if value is not None and Validate_simpletypes_:
            if value <= 0.0:
                warnings_.warn('Value "%(value)s" does not match xsd minExclusive restriction on nonNegativeDouble' % {"value" : value} )
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RectType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RectType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RectType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RectType'):
        if self.xOff is not None and 'xOff' not in already_processed:
            already_processed.add('xOff')
            outfile.write(' xOff="%s"' % self.gds_format_double(self.xOff, input_name='xOff'))
        if self.yOff is not None and 'yOff' not in already_processed:
            already_processed.add('yOff')
            outfile.write(' yOff="%s"' % self.gds_format_double(self.yOff, input_name='yOff'))
        if self.xSize is not None and 'xSize' not in already_processed:
            already_processed.add('xSize')
            outfile.write(' xSize=%s' % (quote_attrib(self.xSize), ))
        if self.ySize is not None and 'ySize' not in already_processed:
            already_processed.add('ySize')
            outfile.write(' ySize=%s' % (quote_attrib(self.ySize), ))
    def exportChildren(self, outfile, level, namespace_='', name_='RectType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='RectType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.xOff is not None and 'xOff' not in already_processed:
            already_processed.add('xOff')
            showIndent(outfile, level)
            outfile.write('xOff=%e,\n' % (self.xOff,))
        if self.yOff is not None and 'yOff' not in already_processed:
            already_processed.add('yOff')
            showIndent(outfile, level)
            outfile.write('yOff=%e,\n' % (self.yOff,))
        if self.xSize is not None and 'xSize' not in already_processed:
            already_processed.add('xSize')
            showIndent(outfile, level)
            outfile.write('xSize=%e,\n' % (self.xSize,))
        if self.ySize is not None and 'ySize' not in already_processed:
            already_processed.add('ySize')
            showIndent(outfile, level)
            outfile.write('ySize=%e,\n' % (self.ySize,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xOff', node)
        if value is not None and 'xOff' not in already_processed:
            already_processed.add('xOff')
            try:
                self.xOff = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (xOff): %s' % exp)
        value = find_attr_value_('yOff', node)
        if value is not None and 'yOff' not in already_processed:
            already_processed.add('yOff')
            try:
                self.yOff = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (yOff): %s' % exp)
        value = find_attr_value_('xSize', node)
        if value is not None and 'xSize' not in already_processed:
            already_processed.add('xSize')
            try:
                self.xSize = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (xSize): %s' % exp)
            self.validate_nonNegativeDouble(self.xSize)    # validate type nonNegativeDouble
        value = find_attr_value_('ySize', node)
        if value is not None and 'ySize' not in already_processed:
            already_processed.add('ySize')
            try:
                self.ySize = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (ySize): %s' % exp)
            self.validate_nonNegativeDouble(self.ySize)    # validate type nonNegativeDouble
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class RectType


class PixelFunctionArgumentsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PixelFunctionArgumentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PixelFunctionArgumentsType.subclass:
            return PixelFunctionArgumentsType.subclass(*args_, **kwargs_)
        else:
            return PixelFunctionArgumentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PixelFunctionArgumentsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PixelFunctionArgumentsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PixelFunctionArgumentsType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PixelFunctionArgumentsType'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' %d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PixelFunctionArgumentsType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='PixelFunctionArgumentsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s="%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PixelFunctionArgumentsType


GDSClassesMapping = {
    'AlgorithmOptions': AlgorithmOptionsType,
    'AveragedSource': SimpleSourceType,
    'CategoryNames': CategoryNamesType,
    'ColorTable': ColorTableType,
    'ComplexSource': ComplexSourceType,
    'DstRect': RectType,
    'Entry': ColorTableEntryType,
    'GCP': GCPType,
    'GCPList': GCPListType,
    'GDALWarpOptions': GDALWarpOptionsType,
    'HistItem': HistItemType,
    'Histograms': HistogramsType,
    'Kernel': KernelType,
    'KernelFilteredSource': KernelFilteredSourceType,
    'MaskBand': MaskBandType,
    'Metadata': MetadataType,
    'OOI': OOIType,
    'OpenOptions': OpenOptionsType,
    'Overview': OverviewType,
    'PanchroBand': PanchroBandType,
    'PansharpeningOptions': PansharpeningOptionsType,
    'PixelFunctionArguments': PixelFunctionArgumentsType,
    'SimpleSource': SimpleSourceType,
    'SourceFilename': SourceFilenameType,
    'SourceProperties': SourcePropertiesType,
    'SpectralBand': SpectralBandType,
    'SrcRect': RectType,
    'VRTRasterBand': VRTRasterBandType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'VRTDataset'
        rootClass = VRTDataset
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'VRTDataset'
        rootClass = VRTDataset
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    parser = None
    doc = parsexml_(StringIO(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'VRTDataset'
        rootClass = VRTDataset
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'VRTDataset'
        rootClass = VRTDataset
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from gdalvrtbindings import *\n\n')
        sys.stdout.write('import gdalvrtbindings as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    main()


__all__ = [
    "AlgorithmOptionsType",
    "CategoryNamesType",
    "ColorTableEntryType",
    "ColorTableType",
    "ComplexSourceType",
    "GCPListType",
    "GCPType",
    "GDALWarpOptionsType",
    "HistItemType",
    "HistogramsType",
    "KernelFilteredSourceType",
    "KernelType",
    "MDIType",
    "MaskBandType",
    "MetadataType",
    "OOIType",
    "OpenOptionsType",
    "OverviewType",
    "PanchroBandType",
    "PansharpeningOptionsType",
    "PixelFunctionArgumentsType",
    "RectType",
    "SimpleSourceType",
    "SourceFilenameType",
    "SourcePropertiesType",
    "SpectralBandType",
    "VRTDataset",
    "VRTRasterBandType"
]
